<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Uzm.Dr. Sait Ramazan Gülbay - Gelişmiş Eğitim Materyalleri & Quiz</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="icon" href="/favicon.ico" sizes="any"> 
<style>
:root {
    color-scheme: light dark;

    --hue-primary: 238;
    --hue-secondary: 212;
    --hue-tertiary: 260;
    --hue-success: 150;
    --hue-error: 3;
    --hue-warning: 48;
    --hue-neutral: 225;

    --chroma-accent: 0.2;
    --chroma-secondary: 0.12;
    --chroma-tertiary: 0.15;
    --chroma-vibrant: 0.25;
    --chroma-subtle: 0.07;
    --chroma-neutral: 0.02;
    --chroma-neutral-subtle: 0.01;

    --lightness-brand-light: 62%;
    --lightness-brand-dark: 66%;

    --lightness-text-strong-light: 8%;
    --lightness-text-normal-light: 18%;
    --lightness-text-soft-light: 38%;
    --lightness-text-muted-light: 55%;

    --lightness-surface-1-light: 100%;
    --lightness-surface-2-light: 98%;
    --lightness-surface-3-light: 96%;
    --lightness-surface-4-light: 93.5%;
    --lightness-surface-overlay-light: 90%;

    --lightness-border-light: 90%;
    --lightness-border-hover-light: 84%;
    --lightness-border-focus-light: 78%;

    --lightness-text-on-accent-light: 99%;

    --bg-secondary-rgb-light: 250, 251, 253;
    --bg-tertiary-rgb-light: 245, 247, 250;

    --accent-primary-light: oklch(var(--lightness-brand-light) var(--chroma-accent) var(--hue-primary));
    --accent-primary-hover-light: oklch(calc(var(--lightness-brand-light) - 6%) var(--chroma-accent) var(--hue-primary));
    --accent-primary-active-light: oklch(calc(var(--lightness-brand-light) - 12%) var(--chroma-accent) var(--hue-primary));

    --accent-secondary-light: oklch(calc(var(--lightness-brand-light) + 6%) var(--chroma-secondary) var(--hue-secondary));
    --accent-secondary-hover-light: oklch(calc(var(--lightness-brand-light) + 1%) var(--chroma-secondary) var(--hue-secondary));
    --accent-secondary-active-light: oklch(calc(var(--lightness-brand-light) - 4%) var(--chroma-secondary) var(--hue-secondary));

    --accent-tertiary-light: oklch(calc(var(--lightness-brand-light) + 10%) var(--chroma-tertiary) var(--hue-tertiary));

    --text-1-light: oklch(var(--lightness-text-strong-light) var(--chroma-neutral) var(--hue-neutral));
    --text-2-light: oklch(var(--lightness-text-normal-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-3-light: oklch(var(--lightness-text-soft-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-muted-light: oklch(var(--lightness-text-muted-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-on-accent-light: oklch(var(--lightness-text-on-accent-light) var(--chroma-neutral-subtle) var(--hue-primary));

    --surface-1-light: oklch(var(--lightness-surface-1-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-2-light: oklch(var(--lightness-surface-2-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-3-light: oklch(var(--lightness-surface-3-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-4-light: oklch(var(--lightness-surface-4-light) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-accent-light: oklch(calc(var(--lightness-brand-light) + 28%) var(--chroma-subtle) var(--hue-primary) / 0.85);
    --surface-overlay-light: oklch(var(--lightness-surface-overlay-light) var(--chroma-neutral-subtle) var(--hue-neutral) / 0.8);

    --border-1-light: oklch(var(--lightness-border-light) var(--chroma-neutral-subtle) var(--hue-neutral) / 0.8);
    --border-2-light: oklch(calc(var(--lightness-border-light) - 6%) var(--chroma-neutral-subtle) var(--hue-neutral) / 0.9);
    --border-accent-light: oklch(var(--lightness-brand-light) var(--chroma-subtle) var(--hue-primary) / 0.7);
    --border-hover-light: oklch(var(--lightness-border-hover-light) var(--chroma-neutral) var(--hue-neutral));
    --border-focus-light: oklch(var(--lightness-border-focus-light) var(--chroma-accent) var(--hue-primary));

    --shadow-color-light: oklch(var(--lightness-text-strong-light) 0.007 0 / 8%);
    --shadow-hover-color-light: oklch(var(--lightness-text-strong-light) 0.008 0 / 14%);
    --shadow-inset-light: inset 0 1px 3px 0 oklch(var(--lightness-text-strong-light) 0.004 0 / 6%);
    --shadow-highlight-light: 0 0.5px 0.5px oklch(100% 0.005 0 / 60%) inset;

    --shadow-sm-light: 0 1px 2px 0 var(--shadow-color-light), 0 2px 4px -1px var(--shadow-color-light);
    --shadow-md-light: 0 4px 8px -2px var(--shadow-color-light), 0 2px 4px -2px var(--shadow-color-light);
    --shadow-lg-light: 0 12px 16px -4px var(--shadow-color-light), 0 4px 6px -4px var(--shadow-color-light);
    --shadow-xl-light: 0 20px 25px -5px var(--shadow-color-light), 0 10px 10px -6px var(--shadow-color-light);
    --shadow-2xl-light: 0 28px 50px -12px var(--shadow-color-light);

    --success-light: oklch(62% var(--chroma-secondary) var(--hue-success));
    --error-light: oklch(67% var(--chroma-accent) var(--hue-error));
    --warning-light: oklch(80% var(--chroma-accent) var(--hue-warning));
    --success-bg-light: oklch(97.5% var(--chroma-subtle) var(--hue-success) / 0.7);
    --error-bg-light: oklch(97.5% var(--chroma-subtle) var(--hue-error) / 0.7);
    --warning-bg-light: oklch(98.5% var(--chroma-subtle) var(--hue-warning) / 0.7);
    --success-border-light: oklch(88% var(--chroma-subtle) var(--hue-success));
    --error-border-light: oklch(88% var(--chroma-subtle) var(--hue-error));
    --warning-border-light: oklch(90% var(--chroma-subtle) var(--hue-warning));

    --lightness-text-strong-dark: 98%;
    --lightness-text-normal-dark: 90%;
    --lightness-text-soft-dark: 78%;
    --lightness-text-muted-dark: 65%;

    --lightness-surface-1-dark: 5%;
    --lightness-surface-2-dark: 9%;
    --lightness-surface-3-dark: 14%;
    --lightness-surface-4-dark: 19%;
    --lightness-surface-overlay-dark: 25%;

    --lightness-border-dark: 28%;
    --lightness-border-hover-dark: 34%;
    --lightness-border-focus-dark: 40%;

    --lightness-text-on-accent-dark: 8%;

    --bg-secondary-rgb-dark: 23, 26, 31;
    --bg-tertiary-rgb-dark: 36, 40, 46;

    --accent-primary-dark: oklch(var(--lightness-brand-dark) var(--chroma-accent) var(--hue-primary));
    --accent-primary-hover-dark: oklch(calc(var(--lightness-brand-dark) + 6%) var(--chroma-accent) var(--hue-primary));
    --accent-primary-active-dark: oklch(calc(var(--lightness-brand-dark) + 12%) var(--chroma-accent) var(--hue-primary));

    --accent-secondary-dark: oklch(calc(var(--lightness-brand-dark) - 7%) var(--chroma-secondary) var(--hue-secondary));
    --accent-secondary-hover-dark: oklch(calc(var(--lightness-brand-dark) - 3%) var(--chroma-secondary) var(--hue-secondary));
    --accent-secondary-active-dark: oklch(var(--lightness-brand-dark) var(--chroma-secondary) var(--hue-secondary));

    --accent-tertiary-dark: oklch(calc(var(--lightness-brand-dark) - 10%) var(--chroma-tertiary) var(--hue-tertiary));

    --text-1-dark: oklch(var(--lightness-text-strong-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-2-dark: oklch(var(--lightness-text-normal-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-3-dark: oklch(var(--lightness-text-soft-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-muted-dark: oklch(var(--lightness-text-muted-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --text-on-accent-dark: oklch(var(--lightness-text-on-accent-dark) var(--chroma-neutral) var(--hue-primary));

    --surface-1-dark: oklch(var(--lightness-surface-1-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-2-dark: oklch(var(--lightness-surface-2-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-3-dark: oklch(var(--lightness-surface-3-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-4-dark: oklch(var(--lightness-surface-4-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --surface-accent-dark: oklch(calc(var(--lightness-brand-dark) - 48%) var(--chroma-subtle) var(--hue-primary) / 0.35);
    --surface-overlay-dark: oklch(var(--lightness-surface-overlay-dark) var(--chroma-neutral-subtle) var(--hue-neutral) / 0.85);

    --border-1-dark: oklch(var(--lightness-border-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
    --border-2-dark: oklch(calc(var(--lightness-border-dark) + 6%) var(--chroma-neutral-subtle) var(--hue-neutral));
    --border-accent-dark: oklch(var(--lightness-brand-dark) var(--chroma-subtle) var(--hue-primary) / 0.45);
    --border-hover-dark: oklch(var(--lightness-border-hover-dark) var(--chroma-neutral) var(--hue-neutral));
    --border-focus-dark: oklch(var(--lightness-border-focus-dark) var(--chroma-accent) var(--hue-primary));

    --shadow-color-dark: oklch(2% 0.018 0 / 45%);
    --shadow-hover-color-dark: oklch(2% 0.02 0 / 55%);
    --shadow-inset-dark: inset 0 1px 2px 0 oklch(100% 0.004 0 / 8%);
    --shadow-highlight-dark: 0 1px 0px oklch(100% 0.008 0 / 10%) inset;

    --shadow-sm-dark: 0 1px 3px 0 var(--shadow-color-dark), 0 1px 2px -1px var(--shadow-color-dark);
    --shadow-md-dark: 0 4px 8px -2px var(--shadow-color-dark), 0 2px 4px -2px var(--shadow-color-dark);
    --shadow-lg-dark: 0 12px 16px -4px var(--shadow-color-dark), 0 4px 6px -4px var(--shadow-color-dark);
    --shadow-xl-dark: 0 20px 25px -5px var(--shadow-color-dark), 0 10px 10px -6px var(--shadow-color-dark);
    --shadow-2xl-dark: 0 28px 50px -12px var(--shadow-color-dark);

    --success-dark: oklch(72% var(--chroma-secondary) var(--hue-success));
    --error-dark: oklch(74% var(--chroma-accent) var(--hue-error));
    --warning-dark: oklch(82% var(--chroma-accent) var(--hue-warning));
    --success-bg-dark: oklch(18% var(--chroma-subtle) var(--hue-success) / 0.35);
    --error-bg-dark: oklch(18% var(--chroma-subtle) var(--hue-error) / 0.35);
    --warning-bg-dark: oklch(20% var(--chroma-subtle) var(--hue-warning) / 0.35);
    --success-border-dark: oklch(32% var(--chroma-subtle) var(--hue-success) / 0.5);
    --error-border-dark: oklch(32% var(--chroma-subtle) var(--hue-error) / 0.5);
    --warning-border-dark: oklch(34% var(--chroma-subtle) var(--hue-warning) / 0.5);

    --bg-primary: var(--surface-1-light);
    --bg-secondary: var(--surface-2-light);
    --bg-tertiary: var(--surface-3-light);
    --bg-accent: var(--surface-accent-light);
    --bg-overlay: var(--surface-overlay-light);
    --bg-secondary-rgb: var(--bg-secondary-rgb-light);
    --bg-tertiary-rgb: var(--bg-tertiary-rgb-light);
    --text-primary: var(--text-1-light);
    --text-secondary: var(--text-2-light);
    --text-muted: var(--text-muted-light);
    --text-on-accent: var(--text-on-accent-light);
    --accent-primary: var(--accent-primary-light);
    --accent-primary-hover: var(--accent-primary-hover-light);
    --accent-primary-active: var(--accent-primary-active-light);
    --accent-secondary: var(--accent-secondary-light);
    --accent-secondary-hover: var(--accent-secondary-hover-light);
    --accent-secondary-active: var(--accent-secondary-active-light);
    --accent-tertiary: var(--accent-tertiary-light);
    --border-primary: var(--border-1-light);
    --border-secondary: var(--border-2-light);
    --border-accent: var(--border-accent-light);
    --border-hover: var(--border-hover-light);
    --border-focus: var(--border-focus-light);
    --shadow-color: var(--shadow-color-light);
    --shadow-hover-color: var(--shadow-hover-color-light);
    --shadow-inset: var(--shadow-inset-light);
    --shadow-highlight: var(--shadow-highlight-light);
    --shadow-sm: var(--shadow-sm-light);
    --shadow-md: var(--shadow-md-light);
    --shadow-lg: var(--shadow-lg-light);
    --shadow-xl: var(--shadow-xl-light);
    --shadow-2xl: var(--shadow-2xl-light);
    --success: var(--success-light);
    --error: var(--error-light);
    --warning: var(--warning-light);
    --success-bg: var(--success-bg-light);
    --error-bg: var(--error-bg-light);
    --warning-bg: var(--warning-bg-light);
    --success-border: var(--success-border-light);
    --error-border: var(--error-border-light);
    --warning-border: var(--warning-border-light);

    --border-radius-sm: 0.4rem;
    --border-radius-md: 0.8rem;
    --border-radius-lg: 1.2rem;
    --border-radius-xl: 1.6rem;
    --font-family: 'Poppins', 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
    --font-size-base: clamp(1rem, 0.92rem + 0.3vw, 1.12rem);
    --line-height-base: clamp(1.65, 1.55rem + 0.4vw, 1.8);
    --font-size-sm: calc(var(--font-size-base) * 0.85);
    --font-size-lg: calc(var(--font-size-base) * 1.3);
    --font-size-xl: calc(var(--font-size-base) * 1.6);
    --font-size-xxl: calc(var(--font-size-base) * 2.1);
    --font-size-xxxl: calc(var(--font-size-base) * 2.9);

    --space-unit: 1rem;
    --space-xxs: calc(var(--space-unit) * 0.35);
    --space-xs: calc(var(--space-unit) * 0.6);
    --space-s: calc(var(--space-unit) * 0.85);
    --space-m: calc(var(--space-unit) * 1.2);
    --space-l: calc(var(--space-unit) * 1.8);
    --space-xl: calc(var(--space-unit) * 2.8);
    --space-xxl: calc(var(--space-unit) * 4.5);
    --space-xxxl: calc(var(--space-unit) * 7);

    --anim-duration-fast: 0.2s;
    --anim-duration-normal: 0.4s;
    --anim-duration-slow: 0.7s;
    --anim-duration-xslow: 1.1s;
    --anim-easing-standard: cubic-bezier(0.5, 0, 0.15, 1);
    --anim-easing-decelerate: cubic-bezier(0.1, 0.7, 0.1, 1);
    --anim-easing-accelerate: cubic-bezier(0.7, 0, 0.9, 0.3);
    --anim-easing-bounce: cubic-bezier(0.25, 1.8, 0.5, 0.8);
    --anim-easing-elastic: cubic-bezier(0.5, 1.5, 0.5, 0.8);
    --anim-easing-elegant: cubic-bezier(0.85, 0, 0.15, 1);

    --transition-speed: var(--anim-duration-normal);
    --transition-easing: var(--anim-easing-elegant);
    --focus-ring-color: oklch(var(--lightness-brand-light) var(--chroma-accent) var(--hue-primary) / 0.7);
    --focus-ring-width: 3px;
    --focus-ring-offset: 2px;
    --disabled-opacity: 0.45;
}

body.dark-mode {
    --bg-primary: var(--surface-1-dark);
    --bg-secondary: var(--surface-2-dark);
    --bg-tertiary: var(--surface-3-dark);
    --bg-accent: var(--surface-accent-dark);
    --bg-overlay: var(--surface-overlay-dark);
    --bg-secondary-rgb: var(--bg-secondary-rgb-dark);
    --bg-tertiary-rgb: var(--bg-tertiary-rgb-dark);
    --text-primary: var(--text-1-dark);
    --text-secondary: var(--text-2-dark);
    --text-muted: var(--text-muted-dark);
    --text-on-accent: var(--text-on-accent-dark);
    --accent-primary: var(--accent-primary-dark);
    --accent-primary-hover: var(--accent-primary-hover-dark);
    --accent-primary-active: var(--accent-primary-active-dark);
    --accent-secondary: var(--accent-secondary-dark);
    --accent-secondary-hover: var(--accent-secondary-hover-dark);
    --accent-secondary-active: var(--accent-secondary-active-dark);
    --accent-tertiary: var(--accent-tertiary-dark);
    --border-primary: var(--border-1-dark);
    --border-secondary: var(--border-2-dark);
    --border-accent: var(--border-accent-dark);
    --border-hover: var(--border-hover-dark);
    --border-focus: var(--border-focus-dark);
    --shadow-color: var(--shadow-color-dark);
    --shadow-hover-color: var(--shadow-hover-color-dark);
    --shadow-inset: var(--shadow-inset-dark);
    --shadow-highlight: var(--shadow-highlight-dark);
    --shadow-sm: var(--shadow-sm-dark);
    --shadow-md: var(--shadow-md-dark);
    --shadow-lg: var(--shadow-lg-dark);
    --shadow-xl: var(--shadow-xl-dark);
    --shadow-2xl: var(--shadow-2xl-dark);
    --success: var(--success-dark);
    --error: var(--error-dark);
    --warning: var(--warning-dark);
    --success-bg: var(--success-bg-dark);
    --error-bg: var(--error-bg-dark);
    --warning-bg: var(--warning-bg-dark);
    --success-border: var(--success-border-dark);
    --error-border: var(--error-border-dark);
    --warning-border: var(--warning-border-dark);
    --focus-ring-color: oklch(var(--lightness-brand-dark) var(--chroma-accent) var(--hue-primary) / 0.8);
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    -webkit-tap-highlight-color: transparent;
    word-wrap: break-word;
    font-feature-settings: 'liga' 1, 'calt' 1, 'kern' 1, 'ss01' 1;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-smooth: always;
    border-style: solid;
    border-width: 0;
    outline-offset: var(--focus-ring-offset);
}

*:focus {
    outline: none;
}

*:focus-visible {
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    box-shadow: 0 0 0 var(--focus-ring-width) var(--bg-secondary);
    transition: outline var(--anim-duration-fast) var(--transition-easing), box-shadow var(--anim-duration-fast) var(--transition-easing);
    border-radius: var(--border-radius-sm);
}

html {
    scroll-behavior: smooth;
    scroll-snap-type: y mandatory;
    overscroll-behavior-y: contain;
    font-size: 100%;
    height: 100%;
    -webkit-text-size-adjust: 100%;
    scrollbar-gutter: stable both-edges;
    scrollbar-width: thin;
    scrollbar-color: var(--border-hover) color-mix(in srgb, var(--bg-primary) 50%, transparent);
}

body {
    font-family: var(--font-family);
    background-color: var(--bg-primary);
    color: var(--text-primary);
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    transition: background-color var(--transition-speed) ease-in-out, color var(--transition-speed) ease-in-out;
    padding-top: 0;
    overflow-x: hidden;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    background-image: linear-gradient(rgba(var(--bg-secondary-rgb), 0.02), rgba(var(--bg-secondary-rgb), 0.02)),
                      radial-gradient(ellipse at top left, rgba(var(--bg-secondary-rgb), 0.1) 0%, transparent 50%),
                      radial-gradient(ellipse at bottom right, rgba(var(--bg-tertiary-rgb), 0.1) 0%, transparent 50%);
}
/* --- Yeni Kurgu: Geri Bildirim Butonu Stili --- */

.learning-item-controls {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-s);
    margin-top: var(--space-s); /* Cevap satırından sonra boşluk */
    align-items: center;
}

button.feedback-btn {
    font-size: calc(var(--font-size-sm) * 0.8); /* Çok küçük font */
    padding: 2px var(--space-xs); /* Minimal padding */
    background-color: transparent; /* Arka plan yok */
    color: var(--text-muted); /* Muted renk */
    border: 1px solid var(--border-secondary);
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    transition: all var(--anim-duration-fast) ease;
    display: inline-flex; /* İkon ve metin için */
    align-items: center;
    gap: var(--space-xxs); /* İkon ve metin arası boşluk */
    line-height: 1.3;
    box-shadow: none;
}

button.feedback-btn i.fas {
    font-size: 0.9em; /* İkon boyutu */
    margin-right: 2px;
}

button.feedback-btn:hover {
    background-color: var(--surface-3);
    color: var(--warning); /* Hover'da uyarı rengi */
    border-color: var(--warning-border);
    box-shadow: var(--shadow-sm);
    transform: translateY(-1px);
}

button.feedback-btn:active {
    background-color: var(--surface-4);
    transform: translateY(0px);
    box-shadow: var(--shadow-inset);
}

button.feedback-btn:focus-visible {
    border-color: var(--border-focus);
    outline: calc(var(--focus-ring-width) - 1px) solid var(--focus-ring-color);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary);
}
/* --- Yeni Kurgu: Arama Modalı Stilleri --- */

.search-modal-overlay {
    position: fixed;
    inset: 0; /* top: 0; left: 0; right: 0; bottom: 0; */
    background-color: color-mix(in srgb, var(--surface-overlay-light) 80%, transparent); /* Açık tema overlay */
    backdrop-filter: blur(8px) saturate(100%);
    -webkit-backdrop-filter: blur(8px) saturate(100%);
    z-index: 2000; /* En üstte */
    display: flex;
    align-items: flex-start; /* İçeriği yukarıda başlat */
    justify-content: center;
    padding: 10vh 5% var(--space-xl) 5%; /* Üstten boşluk, yanlardan ve alttan padding */
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--anim-duration-normal) ease, visibility var(--anim-duration-normal) ease;
    overflow-y: auto; /* Sonuçlar taşarsa scroll */
}

body.dark-mode .search-modal-overlay {
    background-color: color-mix(in srgb, var(--surface-overlay-dark) 90%, transparent); /* Koyu tema overlay */
}

/* Modal açıldığında (body.search-active) */
body.search-active .search-modal-overlay {
    opacity: 1;
    visibility: visible;
}

.search-modal-content {
    background-color: var(--surface-2);
    border-radius: var(--border-radius-lg);
    padding: var(--space-xl);
    box-shadow: var(--shadow-2xl);
    width: 100%;
    max-width: 700px; /* Modal genişliği */
    position: relative;
    transform: scale(0.95);
    transition: transform var(--anim-duration-normal) var(--anim-easing-elegant);
}

body.search-active .search-modal-content {
    transform: scale(1);
}


.search-modal-close-btn {
    position: absolute;
    top: var(--space-m);
    right: var(--space-m);
    background: none;
    border: none;
    font-size: 2rem;
    color: var(--text-muted);
    cursor: pointer;
    padding: 0 var(--space-xs);
    line-height: 1;
    transition: color var(--anim-duration-fast) ease, transform var(--anim-duration-fast) ease;
}
.search-modal-close-btn:hover {
    color: var(--text-primary);
    transform: scale(1.1) rotate(90deg);
}

.search-input-container {
    position: relative;
    margin-bottom: var(--space-l);
}

.search-modal-icon {
    position: absolute;
    top: 50%;
    left: var(--space-m);
    transform: translateY(-50%);
    color: var(--text-muted);
    font-size: 1.2rem;
    pointer-events: none; /* İkonun tıklanmasını engelle */
}

#search-modal-input {
    width: 100%;
    padding: var(--space-m) var(--space-m) var(--space-m) calc(var(--space-m) + var(--space-xl)); /* Sol padding ikona yer açar */
    font-size: var(--font-size-lg);
    font-family: inherit;
    color: var(--text-primary);
    background-color: var(--surface-3);
    border: 1px solid var(--border-2);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-inset);
    transition: border-color var(--anim-duration-fast) ease, box-shadow var(--anim-duration-fast) ease;
    appearance: none; /* Tarayıcı varsayılan stilini kaldır */
}
#search-modal-input::placeholder {
    color: var(--text-muted);
    opacity: 0.8;
}
#search-modal-input:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: var(--shadow-inset), 0 0 0 2px color-mix(in oklch, var(--accent-primary) l c h / 0.3);
}
/* type="search" için temizleme (X) ikonunu gizle (isteğe bağlı) */
#search-modal-input::-webkit-search-cancel-button,
#search-modal-input::-webkit-search-decoration {
  -webkit-appearance: none;
  appearance: none;
}

.search-results-container {
    margin-top: var(--space-l);
    max-height: 50vh; /* Sonuç alanı yüksekliği */
    overflow-y: auto; /* Gerekirse scroll */
    padding-right: var(--space-xs); /* Scroll bar için yer */
}

.search-placeholder, .search-no-results {
    color: var(--text-muted);
    text-align: center;
    padding: var(--space-l) 0;
    font-style: italic;
}

.search-result-item {
    display: block;
    padding: var(--space-m);
    margin-bottom: var(--space-s);
    border-radius: var(--border-radius-md);
    background-color: var(--surface-3);
    border: 1px solid transparent; /* Hover için yer tutucu */
    transition: background-color var(--anim-duration-fast) ease, border-color var(--anim-duration-fast) ease, transform var(--anim-duration-fast) ease;
    text-decoration: none;
    cursor: pointer;
}

.search-result-item:hover {
    background-color: var(--surface-4);
    border-color: var(--border-hover);
    transform: translateX(4px);
}

.search-result-title {
    font-weight: 600;
    color: var(--text-primary);
    font-size: var(--font-size-base);
    margin-bottom: var(--space-xxs);
}
.search-result-title mark { /* Eşleşen kelimeyi vurgula */
    background-color: color-mix(in oklch, var(--accent-secondary) l c h / 0.4);
    color: inherit;
    padding: 0 2px;
    border-radius: 2px;
}

.search-result-desc {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    line-height: 1.5;
    /* Metin kesme (isteğe bağlı) */
    display: -webkit-box;
    -webkit-line-clamp: 2; /* 2 satır göster */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: var(--space-xs);
}
.search-result-desc mark { /* Eşleşen kelimeyi vurgula */
    background-color: color-mix(in oklch, var(--accent-secondary) l c h / 0.4);
    color: inherit;
    padding: 0 2px;
    border-radius: 2px;
}

.search-result-type {
    font-size: calc(var(--font-size-sm) * 0.85);
    font-weight: 500;
    color: var(--text-muted);
    text-transform: uppercase;
    display: inline-block;
    padding: 1px var(--space-xs);
    border-radius: var(--border-radius-sm);
    background-color: var(--surface-4);
}
.search-result-type.quiz {
    color: var(--accent-primary);
    background-color: var(--surface-accent);
}
.search-result-type.lecture { /* İleride konu anlatımları için */
    color: var(--accent-secondary);
    background-color: color-mix(in oklch, var(--accent-secondary) l c h / 0.2);
}

/* --- Arama Modalı Duyarlılık --- */
@media (max-width: 768px) {
    .search-modal-overlay {
        padding: 5vh 3% var(--space-l) 3%; /* Padding azalt */
    }
    .search-modal-content {
        padding: var(--space-l); /* İç padding azalt */
    }
    #search-modal-input {
        font-size: var(--font-size-base); /* Font boyutu azalt */
        padding: var(--space-s) var(--space-s) var(--space-s) calc(var(--space-s) + var(--space-l));
    }
    .search-modal-icon {
        left: var(--space-s);
        font-size: 1.1rem;
    }
    .search-results-container {
        max-height: 60vh; /* Yüksekliği artır */
    }
}
@media (prefers-reduced-motion: reduce) {
    html {
        scroll-behavior: auto !important;
        scroll-snap-type: none !important;
    }
    *, *::before, *::after {
        animation-duration: 1ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 1ms !important;
        scroll-behavior: auto !important;
        transition-delay: 0ms !important;
        animation-delay: 0ms !important;
    }
}

::-webkit-scrollbar {
    width: 10px;
    height: 10px;
}
::-webkit-scrollbar-track {
    background-color: color-mix(in srgb, var(--bg-primary) 50%, transparent);
    margin-block: var(--space-xs);
    border-radius: 10px;
}
::-webkit-scrollbar-thumb {
    background-color: var(--border-hover);
    border-radius: 10px;
    border: 2px solid transparent;
    background-clip: padding-box;
    transition: background-color var(--anim-duration-fast) ease-in-out, border-color var(--anim-duration-fast) ease-in-out;
}
::-webkit-scrollbar-thumb:hover {
    background-color: var(--accent-secondary);
}
::-webkit-scrollbar-corner {
    background: transparent;
}
body ::-webkit-scrollbar-thumb {
    border-color: var(--bg-primary);
}

.container {
    width: 94%;
    max-width: 1300px;
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--space-l);
    padding-right: var(--space-l);
}
/* --- Yeni Header Stilleri --- */
#main-header {
    background-color: color-mix(in srgb, var(--surface-2) 85%, transparent); /* Hafifçe ayarlanmış arka plan */
    backdrop-filter: blur(12px) saturate(110%); /* Daha ince blur/saturate */
    -webkit-backdrop-filter: blur(12px) saturate(110%);
    padding: var(--space-s) 0;
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: var(--shadow-sm); /* Daha ince başlangıç gölgesi */
    /* Alt kenara ince bir çizgi ekleyelim */
    border-bottom: 1px solid color-mix(in srgb, var(--border-1) 50%, transparent);
    transition: background-color var(--transition-speed) var(--transition-easing),
                border-color var(--transition-speed) var(--transition-easing),
                box-shadow var(--transition-speed) var(--transition-easing),
                padding var(--transition-speed) var(--transition-easing); /* Padding geçişi eklendi (scroll animasyonu için) */
}

/* Scroll sonrası için (JS ile class eklenecek) */
body.scrolled #main-header {
    background-color: color-mix(in srgb, var(--surface-3) 92%, transparent);
    box-shadow: var(--shadow-md);
    border-bottom-color: var(--border-1);
     /* padding: var(--space-xs) 0; */ /* İsteğe bağlı: scroll sonrası daha ince header */
}


#main-header .container {
    display: flex;
    justify-content: space-between; /* Logo sol, Nav orta, Eylemler sağ */
    align-items: center;
    gap: var(--space-m); /* Elemanlar arası boşluk */
}

/* Logo Alanı */
.logo-container {
    flex-shrink: 0; /* Küçülmesin */
}
.logo-container a { /* Logoyu link yapalım */
    text-decoration: none;
}
.logo-container h1 { /* H1 stilini koru */
    font-size: calc(var(--font-size-base) * 1.35); /* Boyut ayarlandı */
    font-weight: 700; /* Ağırlık ayarlandı */
    margin: 0;
    background: linear-gradient(80deg, var(--accent-primary), var(--accent-primary-hover)); /* Gradyan sadeleştirildi */
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    letter-spacing: -0.5px;
    transition: filter 0.3s ease;
}
.logo-container h1:hover {
    filter: brightness(1.1);
}


/* Navigasyon Alanı (Ortada) */
#main-header nav {
    flex-grow: 1; /* Ortada yerleşmek için genişlesin */
    display: flex;
    justify-content: center; /* Linkleri ortala */
}

#main-header nav ul {
    list-style: none;
    display: flex;
    gap: var(--space-s); /* Linkler arası boşluk ayarlandı */
    align-items: center;
    padding: 0; margin: 0;
}

#main-header nav a {
    text-decoration: none;
    color: var(--text-secondary);
    font-weight: 500;
    font-size: var(--font-size-base); /* Boyut ayarlandı */
    padding: var(--space-xs) var(--space-m); /* Hap şekli için padding */
    border-radius: var(--border-radius-xl); /* Yuvarlak kenarlar */
    transition: color var(--transition-speed) var(--transition-easing),
                background-color var(--transition-speed) var(--transition-easing),
                transform var(--transition-speed) var(--transition-easing);
    position: relative;
    letter-spacing: 0.3px;
    display: inline-block;
    transform: scale(1); /* Başlangıç ölçeği */
}

/* Hover efekti: Hafif büyüme ve arka plan */
#main-header nav a:hover {
    color: var(--text-primary);
    background-color: var(--surface-3);
    transform: scale(1.05); /* Hafif büyüme */
}

/* Aktif link stili: Hap arka planı */
#main-header nav a.active {
    color: var(--accent-primary);
    font-weight: 600;
    background-color: var(--surface-accent);
}

#main-header nav a:focus-visible {
    color: var(--accent-primary);
    background-color: var(--surface-accent);
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    outline-offset: 2px;
    box-shadow: none; /* Dışarıdaki focus shadow'u kullan */
}

/* Alt çizgi animasyonu kaldırıldı */
#main-header nav a::after {
   display: none;
}


/* Eylemler Alanı (Sağda) */
#header-actions {
    display: flex;
    align-items: center;
    gap: var(--space-m); /* Eylemler arası boşluk */
    flex-shrink: 0; /* Küçülmesin */
}

.search-icon-btn, .theme-toggle-header-btn { /* Ortak stil */
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.3rem; /* İkon boyutu */
    padding: var(--space-xs);
    border-radius: 50%;
    cursor: pointer;
    transition: color var(--transition-speed) ease, background-color var(--transition-speed) ease;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
}

.search-icon-btn:hover, .theme-toggle-header-btn:hover {
    color: var(--text-primary);
    background-color: var(--surface-3);
}

.search-icon-btn:focus-visible, .theme-toggle-header-btn:focus-visible {
     color: var(--text-primary);
     background-color: var(--surface-accent);
     outline: var(--focus-ring-width) solid var(--focus-ring-color);
     outline-offset: 1px;
}

/* İsteğe bağlı: Tema düğmesini header'a taşıdıysanız, alttaki butonu gizleyin */
/*
#theme-toggle-btn {
    display: none;
}
*/

/* Mobil menü ve hamburger butonu stilleri (şimdilik eklenmedi, sonraki adımda) */
.mobile-menu-toggle { display: none; }
.mobile-nav { display: none; }

#hero,
.content-section {
    scroll-snap-align: start;
    scroll-margin-top: 100px; /* Adjust based on sticky header height */
    padding: var(--space-xxxl) 0;
    position: relative;
    overflow: hidden;
}

/* Removed min-height from general .content-section */
.content-section {
    border-bottom: 1px solid var(--border-primary);
    transition: border-color var(--transition-speed) var(--transition-easing), background-color var(--transition-speed) var(--transition-easing);
    position: relative;
    background: linear-gradient(180deg, transparent 0%, color-mix(in srgb, var(--bg-secondary) 30%, transparent) 100%);
}
.content-section::before {
    content: '';
    position: absolute;
    top: -1px;
    left: 50%;
    transform: translateX(-50%);
    width: 50%;
    height: 2px; /* Slightly thinner */
    background: linear-gradient(90deg, transparent, var(--accent-secondary), transparent);
    opacity: 0.3; /* Slightly less opaque */
    transition: opacity var(--transition-speed) var(--transition-easing), width 0.4s ease, background 0.4s ease;
    filter: blur(0.5px);
}
.content-section:hover::before {
    width: 75%;
    opacity: 0.5;
    background: linear-gradient(90deg, transparent, var(--accent-primary), transparent); /* Change color on hover */
}
.content-section:last-of-type {
    border-bottom: none;
    background: none;
}
.content-section:last-of-type::before {
    display: none;
}

.content-section h2 {
    text-align: center;
    font-size: clamp(2.3rem, 1.4rem + 3.5vw, 3.4rem);
    margin-bottom: var(--space-xxl);
    color: var(--text-primary);
    font-weight: 700;
    position: relative;
    padding-bottom: var(--space-l);
    letter-spacing: -2.5px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-l);
    transition: color var(--transition-speed) var(--transition-easing);
}
.content-section h2::after {
    content: '';
    position: absolute;
    bottom: 0; left: 50%;
    transform: translateX(-50%);
    width: 80px; height: 6px; /* Slightly thinner underline */
    background: linear-gradient(90deg,
        oklch(from var(--accent-primary) l calc(c * 0.6) h / 0.1),
        var(--accent-primary),
        oklch(from var(--accent-secondary) l calc(c * 0.8) calc(h - 30) / 0.5),
        oklch(from var(--accent-primary) l calc(c * 0.6) h / 0.1)
    );
    border-radius: 3px; /* Sharper radius */
    transition: background var(--transition-speed) var(--transition-easing), width var(--transition-speed) var(--anim-easing-elegant), filter var(--transition-speed) ease;
    opacity: 1;
    filter: blur(1px); /* Slightly less blur */
}
.content-section:hover h2::after {
    width: 150px; /* Wider on hover */
    filter: blur(0.5px);
}
.content-section h2 i.fas {
    font-size: 1em;
    transition: color var(--transition-speed) var(--transition-easing), transform 0.6s var(--anim-easing-elastic), filter 0.4s ease;
    background: linear-gradient(70deg, var(--accent-primary), var(--accent-secondary-hover));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    filter: drop-shadow(0 2px 3px rgba(0,0,0,0.1));
}
.content-section:hover h2 i.fas {
    transform: scale(1.35) rotate(-10deg) translateY(-3px); /* Slightly adjusted hover transform */
    filter: drop-shadow(0 4px 6px color-mix(in oklch, var(--accent-primary) l c h / 0.2));
}

#main-footer {
    background-color: var(--bg-tertiary);
    color: var(--text-muted);
    text-align: center;
    padding: var(--space-xl) 0;
    margin-top: auto;
    font-size: var(--font-size-sm);
    border-top: 1px solid var(--border-primary);
    transition: background-color var(--transition-speed) var(--transition-easing), color var(--transition-speed) var(--transition-easing), border-color var(--transition-speed) var(--transition-easing);
    position: relative;
}
#main-footer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px; /* Slightly thinner gradient */
    background: linear-gradient(180deg, color-mix(in srgb, var(--border-primary) 40%, transparent), transparent);
    opacity: 0.6; /* Slightly less opaque */
    pointer-events: none;
}
#main-footer p {
    line-height: 1.7;
}
#hero {
    min-height: 100vh;
    padding: 0;
    scroll-margin-top: 0;
    color: var(--text-on-accent-light);
    text-align: center;
    position: relative;
    background: linear-gradient(130deg,
        oklch(from var(--accent-primary-light) calc(l * 0.85) calc(c * 1.3) h),
        oklch(from var(--accent-secondary-light) calc(l * 1.05) c calc(h + 20) / 0.8),
        oklch(from var(--accent-tertiary-light) l calc(c * 1.1) h / 0.7),
        oklch(from var(--accent-primary-light) l calc(c * 0.9) calc(h - 100) / 0.85)
    );
    background-size: 400% 400%;
    animation: aurora-super-enhanced 50s ease-in-out infinite alternate;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; /* Ensure no pseudo-elements leak */
}

@keyframes aurora-super-enhanced {
    0% { background-position: 0% 50%; filter: hue-rotate(-5deg) brightness(1) saturate(1.1); }
    25% { background-position: 100% 0%; filter: hue-rotate(10deg) brightness(1.1) saturate(1.2); }
    50% { background-position: 50% 100%; filter: hue-rotate(0deg) brightness(1.15) saturate(1.25); }
    75% { background-position: 0% 100%; filter: hue-rotate(-10deg) brightness(1.1) saturate(1.2); }
    100% { background-position: 0% 50%; filter: hue-rotate(-5deg) brightness(1) saturate(1.1); }
}

body.dark-mode #hero {
    color: var(--text-on-accent-dark);
    background: linear-gradient(130deg,
        oklch(from var(--accent-primary-dark) calc(l * 0.8) calc(c * 1.2) h / 0.9),
        oklch(from var(--accent-secondary-dark) calc(l * 1.1) c calc(h + 20) / 0.7),
        oklch(from var(--accent-tertiary-dark) calc(l * 0.95) calc(c * 1.1) h / 0.65),
        oklch(from var(--accent-primary-dark) calc(l * 0.85) calc(c * 0.9) calc(h - 100) / 0.8)
    );
    background-size: 400% 400%;
    animation: aurora-super-enhanced 50s ease-in-out infinite alternate;
}

#hero .container {
    position: relative;
    z-index: 2;
    max-width: 1000px;
}
#hero h2 {
    font-size: clamp(2.8rem, 1.4rem + 6.5vw, 5.5rem);
    margin-bottom: var(--space-l); font-weight: 800; letter-spacing: -2.5px; /* Reduced negative spacing */
    text-shadow: 0 4px 12px rgba(0, 0, 0, 0.4); /* Slightly softer shadow */
    color: #fff;
    line-height: 1.1; /* Adjusted line height */
    animation: slideDown 1s var(--anim-easing-elegant) both;
    animation-delay: 0.3s;
}
#hero p {
    font-size: clamp(1.2rem, 1rem + 1.5vw, 1.8rem);
    margin-bottom: var(--space-xl); opacity: 0.95; /* Slightly less opacity */
    text-shadow: 0 2px 6px rgba(0, 0, 0, 0.35); /* Slightly softer shadow */
    color: #f0f0f0; /* Slightly off-white */
    max-width: 820px;
    margin-left: auto; margin-right: auto;
    line-height: 1.7; /* Adjusted line height */
    animation: slideUp 1s var(--anim-easing-elegant) both;
    animation-delay: 0.5s;
}
#hero .btn {
    animation: popIn 0.8s var(--anim-easing-bounce) both;
}
#hero .btn:nth-of-type(1) { animation-delay: 0.8s; }
#hero .btn:nth-of-type(2) { animation-delay: 0.95s; }

@keyframes slideDown { from { opacity: 0; transform: translateY(-40px); filter: blur(4px); } to { opacity: 1; transform: translateY(0); filter: blur(0px);} }
@keyframes slideUp { from { opacity: 0; transform: translateY(40px); filter: blur(4px); } to { opacity: 1; transform: translateY(0); filter: blur(0px); } }
@keyframes popIn { from { opacity: 0; transform: scale(0.7) translateY(10px); filter: blur(2px); } to { opacity: 1; transform: scale(1) translateY(0); filter: blur(0px); } }

.btn {
    padding: calc(var(--space-s) + 4px) calc(var(--space-xl) + 2px); /* Slightly adjusted padding */
    font-size: var(--font-size-sm);
    font-weight: 600; /* Slightly less bold */
    text-decoration: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    display: inline-block;
    margin: var(--space-s);
    border: 1px solid transparent;
    box-shadow: var(--shadow-md), var(--shadow-highlight); /* Simplified base shadow */
    vertical-align: middle;
    position: relative;
    overflow: hidden;
    transition: transform var(--transition-speed) var(--anim-easing-elegant), box-shadow var(--transition-speed) var(--anim-easing-elegant), background-position var(--transition-speed) var(--anim-easing-elegant), border-color var(--transition-speed) var(--anim-easing-elegant), color var(--transition-speed) var(--anim-easing-elegant);
    z-index: 1;
    background-size: 250% auto;
    letter-spacing: 0.8px; /* Reduced spacing slightly */
    text-transform: uppercase;
    will-change: transform, box-shadow;
    -webkit-mask-image: radial-gradient(white, black);
}

.btn::before {
    content: '';
    position: absolute;
    top: -10%; left: -200%;
    width: 150%; height: 120%;
    background: linear-gradient(100deg, transparent 35%, color-mix(in srgb, white 35%, transparent) 50%, transparent 65%);
    transition: left var(--anim-duration-slow) var(--anim-easing-elegant);
    z-index: 1;
    transform: skewX(-20deg);
    opacity: 0.5; /* Reduced opacity */
    pointer-events: none;
}

body.dark-mode .btn::before {
      background: linear-gradient(100deg, transparent 35%, color-mix(in srgb, white 15%, transparent) 50%, transparent 65%); /* Dimmer shine */
      opacity: 0.3;
}

.btn:hover::before {
    left: 150%;
    transition-duration: var(--anim-duration-xslow);
}

.btn-primary {
    background-image: linear-gradient(120deg, var(--accent-primary-active) 0%, var(--accent-primary) 40%, var(--accent-primary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-primary-active) 40%, black 50%);
}
.btn-secondary {
    background-image: linear-gradient(120deg, var(--accent-secondary-active) 0%, var(--accent-secondary) 40%, var(--accent-secondary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-secondary-active) 40%, black 50%);
}
.btn:hover {
    background-position: 100% center;
    transform: translateY(-5px) scale(1.04); /* Slightly less lift/scale */
    box-shadow: var(--shadow-xl), var(--shadow-highlight); /* Simplified hover shadow */
    color: var(--text-on-accent);
    border-color: transparent;
}
.btn:active {
    transform: translateY(-1px) scale(0.99); /* Slightly less press */
    box-shadow: var(--shadow-sm), var(--shadow-inset);
    background-position: left center;
    transition-duration: var(--anim-duration-fast);
}
.btn:focus-visible {
    background-position: 100% center;
    border-color: var(--border-focus);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), 0 0 0 calc(var(--focus-ring-offset) + var(--focus-ring-width)) var(--focus-ring-color), var(--shadow-lg);
}
#hero .btn {
    color: #fff;
    text-shadow: 1px 1px 4px oklch(0 0 0 / 0.5); /* Reduced shadow */
    box-shadow: var(--shadow-lg), 0 6px 18px -6px oklch(0 0 0 / 0.35); /* Adjusted shadow */
}
body.dark-mode #hero .btn {
    color: var(--text-on-accent-dark);
    text-shadow: 1px 1px 4px oklch(0 0 0 / 0.6);
     box-shadow: var(--shadow-lg-dark), 0 6px 18px -6px oklch(0 0 0 / 0.45);
}
#hero .btn:hover {
    color: #fff;
    box-shadow: var(--shadow-xl), 0 10px 25px -10px var(--accent-primary); /* Simplified hover shadow */
}
body.dark-mode #hero .btn:hover {
    color: var(--text-on-accent-dark);
    box-shadow: var(--shadow-xl-dark), 0 10px 25px -10px var(--accent-primary-dark);
}
#hero .btn:focus-visible {
    box-shadow: 0 0 0 var(--focus-ring-offset) rgba(255,255,255,0.7), 0 0 0 calc(var(--focus-ring-offset) + var(--focus-ring-width)) var(--accent-primary-light), var(--shadow-xl);
}
body.dark-mode #hero .btn:focus-visible {
    box-shadow: 0 0 0 var(--focus-ring-offset) rgba(0,0,0,0.7), 0 0 0 calc(var(--focus-ring-offset) + var(--focus-ring-width)) var(--accent-primary-dark), var(--shadow-xl-dark);
}

.card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 320px), 1fr)); /* Adjusted minmax slightly */
    gap: var(--space-l); /* Simplified gap */
}
.card {
    background: linear-gradient(155deg, var(--surface-2), var(--surface-3));
    border-radius: var(--border-radius-lg); /* Reduced radius slightly */
    box-shadow: var(--shadow-md), var(--shadow-highlight); /* Simplified base shadow */
    padding: var(--space-l); /* Adjusted padding */
    display: flex; flex-direction: column; align-items: center; text-align: center;
    border: 1px solid var(--border-secondary);
    transition: transform var(--anim-duration-normal) var(--anim-easing-elegant),
                box-shadow var(--anim-duration-normal) var(--anim-easing-elegant),
                border-color var(--anim-duration-normal) var(--anim-easing-elegant),
                background var(--transition-speed) var(--transition-easing);
    position: relative;
    overflow: hidden;
    will-change: transform, box-shadow;
    animation: fadeInUp 0.8s var(--anim-easing-elegant) both; /* Faster animation */
    backface-visibility: hidden;
}

/* Removed complex :after border animation */
/* Removed :has() sibling fade */

.card:hover {
    transform: translateY(-8px) scale(1.03); /* Simplified hover: lift and scale */
    box-shadow: var(--shadow-xl), var(--shadow-highlight); /* Enhanced shadow */
    border-color: var(--border-hover); /* Subtle border color change */
    z-index: 10;
    background: linear-gradient(155deg, var(--surface-3), var(--surface-4));
}

.card > * { position: relative; z-index: 1;}

.card-icon {
    width: 75px; height: 75px; /* Adjusted size */
    border-radius: 50%;
    background: linear-gradient(140deg, var(--surface-4), var(--surface-3));
    display: flex; justify-content: center; align-items: center;
    margin-bottom: var(--space-m); /* Adjusted margin */
    transition: background 0.4s ease, transform 0.4s var(--anim-easing-elastic), box-shadow 0.4s ease;
    border: none;
    box-shadow: var(--shadow-md), var(--shadow-inset); /* Simplified shadow */
    z-index: 2;
}
.card:hover .card-icon {
    background: linear-gradient(140deg, var(--surface-accent), color-mix(in srgb, var(--accent-primary) 20%, var(--surface-4)));
    transform: scale(1.2) translateY(-8px) rotate(8deg); /* Slightly less transform */
    box-shadow: var(--shadow-lg), 0 0 15px 4px color-mix(in oklch, var(--accent-primary) l c h / 0.2);
}
.card-icon i.fas {
    font-size: 2.5rem; /* Adjusted size */
    color: var(--accent-primary);
    transition: color 0.4s ease, transform 0.5s var(--anim-easing-elastic), filter 0.4s ease;
    filter: drop-shadow(0 1px 1px rgba(0,0,0,0.1));
}
.card:hover .card-icon i.fas {
    transform: rotate(-15deg) scale(1.15); /* Slightly less transform */
    color: var(--accent-primary-hover);
    filter: drop-shadow(0 2px 3px color-mix(in oklch, var(--accent-primary) l c h / 0.15));
}
.card h3 {
    font-size: var(--font-size-lg); /* Adjusted size */
    font-weight: 600; color: var(--text-primary);
    margin-bottom: var(--space-s); /* Adjusted margin */
    transition: color var(--transition-speed) var(--transition-easing);
    z-index: 2; position: relative;
    line-height: 1.3;
}
.card p {
    font-size: var(--font-size-base); color: var(--text-secondary);
    margin-bottom: var(--space-m); flex-grow: 1; /* Adjusted margin */
    transition: color var(--transition-speed) var(--transition-easing);
    line-height: 1.7;
    z-index: 2; position: relative;
}
.audience-tags {
    margin-bottom: var(--space-m); display: flex; gap: var(--space-xs); flex-wrap: wrap; justify-content: center; z-index: 2; position: relative;
}
.audience-tag {
    display: inline-block;
    font-size: calc(var(--font-size-sm) * 0.85); /* Smaller tags */
    font-weight: 600;
    text-transform: uppercase;
    padding: var(--space-xxs) var(--space-s);
    border-radius: var(--border-radius-sm);
    background: var(--surface-3); /* Simpler background */
    color: var(--text-muted);
    border: 1px solid var(--border-secondary);
    transition: all var(--anim-duration-fast) ease;
    letter-spacing: 0.5px;
    box-shadow: none; /* Removed inset shadow */
}
.card:hover .audience-tag {
    transform: none; /* No scale on card hover */
}
.audience-tag:hover {
    background: linear-gradient(145deg, var(--accent-secondary-hover), var(--accent-secondary)); /* Changed gradient */
    color: var(--text-on-accent);
    border-color: transparent;
    transform: scale(1.08); /* Slightly less pop */
    box-shadow: var(--shadow-sm);
}
/* Audience tag specific styles remain the same */
.audience-tag.tıp { border-color: #64b5f6; color: #1976d2; background: #e3f2fd;}
.audience-tag.diş { border-color: #81c784; color: #388e3c; background: #e8f5e9;}
body.dark-mode .audience-tag.tıp { border-color: #2196f3; color: #90caf9; background: rgba(33, 150, 243, 0.15);} /* Adjusted dark mode bg */
body.dark-mode .audience-tag.diş { border-color: #4caf50; color: #a5d6a7; background: rgba(76, 175, 80, 0.15);} /* Adjusted dark mode bg */

.card-link {
    display: inline-block; text-decoration: none;
    color: var(--text-on-accent);
    background-image: linear-gradient(120deg, var(--accent-primary-active) 0%, var(--accent-primary) 40%, var(--accent-primary-hover) 100%);
    font-weight: 600; margin-top: auto; /* Pushes to bottom */
    padding: var(--space-s) var(--space-l);
    border: 1px solid color-mix(in srgb, var(--accent-primary-active) 40%, black 50%);
    border-radius: var(--border-radius-md);
    transition: all var(--transition-speed) var(--anim-easing-elegant); /* Removed opacity/transform transition */
    cursor: pointer;
    font-size: var(--font-size-sm);
    opacity: 1; transform: none; /* Made visible by default */
    will-change: box-shadow, background-position;
    z-index: 2; position: relative;
    box-shadow: var(--shadow-sm), var(--shadow-highlight); /* Slightly reduced shadow */
    background-size: 250% auto;
    letter-spacing: 0.8px;
    text-transform: uppercase;
}

/* Removed card:hover .card-link rule that made it appear */

.card-link:hover {
    background-position: 100% center;
    transform: scale(1.05) translateY(-2px); /* Added slight lift */
    box-shadow: var(--shadow-md), var(--shadow-highlight), 0 0 10px 2px color-mix(in oklch, var(--accent-primary) l c h / 0.15); /* Adjusted glow */
    border-color: transparent;
}
.card-link.disabled {
    pointer-events: none; color: var(--text-muted);
    background-image: none;
    background-color: var(--surface-3);
    border-color: var(--border-secondary);
    opacity: var(--disabled-opacity);
    transform: none;
    box-shadow: var(--shadow-inset);
}
.card-link:focus-visible {
    opacity: 1; transform: none;
    border-color: var(--border-focus);
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), var(--shadow-lg);
}
.card-link.disabled:focus-visible { outline: none; box-shadow: var(--shadow-inset); }

/* Added rule for card hover to lift the link slightly */
.card:hover .card-link {
    transform: translateY(-4px); /* Slight lift matching card */
}
.card:hover .card-link:hover {
    transform: scale(1.05) translateY(-6px); /* Combined hover effect */
}

@keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); filter: blur(1px); } to { opacity: 1; transform: translateY(0); filter: blur(0px); } }

#construction-message {
    animation: popIn 1s ease-out both; /* Adjusted timing */
    animation-delay: 0.4s; /* Earlier delay */
}
#construction-message p {
    text-align: center; font-style: italic; color: var(--text-muted);
    padding: var(--space-l) var(--space-m); /* Adjusted padding */
    background-color: var(--surface-2); /* Slightly lighter */
    border-radius: var(--border-radius-lg);
    border: 1px dashed var(--warning-border);
    transition: background-color var(--transition-speed) var(--transition-easing), color var(--transition-speed) var(--transition-easing), border-color var(--transition-speed) var(--transition-easing), box-shadow var(--transition-speed) ease;
    display: flex; align-items: center; justify-content: center; gap: var(--space-m);
    box-shadow: var(--shadow-sm), var(--shadow-inset); /* Simplified shadow */
}
#construction-message:hover {
    box-shadow: var(--shadow-md), var(--shadow-inset);
    border-color: var(--warning);
    background-color: var(--surface-3);
}
#construction-message i.fas {
    font-size: 1.5em; /* Slightly smaller */
    color: var(--warning);
    transition: color var(--transition-speed) var(--transition-easing), transform 0.5s var(--anim-easing-bounce);
}
#construction-message:hover i.fas {
    transform: rotate(-15deg) scale(1.1); /* Adjusted hover */
}
#stats-container {
    display: none; /* Başlangıçta gizli */
    background-color: color-mix(in srgb, var(--surface-2) 90%, transparent); /* Daha az opak arka plan */
    backdrop-filter: blur(10px) saturate(120%);
    -webkit-backdrop-filter: blur(10px) saturate(120%);
    border-bottom: 1px solid var(--border-1);
    padding: var(--space-xs) 3%; /* Azaltılmış padding */
    width: 100%;
    box-sizing: border-box;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 999;
    display: flex; /* Flexbox kalsın */
    justify-content: space-between; /* Elemanları yay */
    align-items: center;
    flex-wrap: nowrap; /* Sarmayı engelle (gerekirse taşsın veya gizlensin) */
    gap: var(--space-s); /* Azaltılmış boşluk */
    min-height: auto; /* Yüksekliği içeriğe bırak */
    height: 55px; /* Sabit, daha ince yükseklik */
    box-shadow: var(--shadow-md);
    transition: background-color var(--transition-speed) var(--transition-easing), border-color var(--transition-speed) var(--transition-easing), box-shadow var(--transition-speed) var(--transition-easing);
    overflow: hidden; /* Taşmaları gizle */
}

body.quiz-active #stats-container {
    display: flex;
}

.stat-item {
    font-size: calc(var(--font-size-sm) * 0.9); /* Küçültülmüş font */
    color: var(--text-muted);
    text-align: center;
    display: flex; /* Yan yana hizalama için */
    align-items: center; /* Dikey ortala */
    gap: var(--space-xxs); /* Etiket ve değer arası boşluk */
    line-height: 1.2;
    white-space: nowrap;
    padding: 0; /* İç padding kaldırıldı */
    flex-shrink: 0; /* Küçülmeyi engelle */
}

/* Etiketleri gizle (isteğe bağlı, sadece değer kalsın?) */
/* .stat-item span:first-child { display: none; } */

.stat-item span:not(.score-value):not(:first-child) { /* Sadece değerler için */
    font-weight: 600; /* Biraz daha belirgin */
    color: var(--text-primary); /* Ana metin rengi */
    font-size: 1em; /* Stat item fontuyla aynı */
    min-width: 20px; /* Minimum genişlik */
    display: inline-block;
    margin: 0;
    padding: 2px 4px; /* Hafif iç boşluk */
    background-color: var(--surface-3); /* Arka plan */
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--border-2);
}

.score-value {
    font-weight: 700;
    min-width: 45px; /* Azaltılmış genişlik */
    display: inline-block;
    text-align: center;
    transition: color var(--anim-duration-normal) ease, background-color var(--anim-duration-normal) ease; /* Yumuşak geçiş */
    font-size: 1em; /* Stat item ile aynı */
    padding: 2px 5px;
    border-radius: var(--border-radius-sm);
    background-color: var(--surface-4); /* Farklı arka plan */
    border: 1px solid var(--border-accent); /* Vurgu kenarlığı */
    /* Renk JS tarafından ayarlanacak */
}

/* Progress Bar Ayrı Bir Alanda */
.progress-stat-container {
    flex-grow: 1; /* Kalan alanı doldur */
    display: flex;
    align-items: center;
    gap: var(--space-s);
    min-width: 150px; /* Minimum genişlik */
    padding: 0 var(--space-m); /* İç boşluk */
}

#stats-round-progress {
    font-weight: 500;
    color: var(--text-secondary);
    font-size: calc(var(--font-size-sm) * 0.9);
    white-space: nowrap;
    /* Animasyon JS ile */
}

#progress-bar-track {
    background-color: var(--surface-4);
    border-radius: 6px; /* Daha ince radius */
    height: 8px; /* Daha ince bar */
    width: 100%; /* Kapsayıcıya göre %100 */
    overflow: hidden;
    position: relative;
    box-shadow: var(--shadow-inset);
    flex-grow: 1; /* Esnek genişlik */
}

#progress-bar-fill {
    background-color: var(--accent-primary);
    /* Animasyonlu çizgiler kaldırıldı, sade dolgu */
    background-image: none;
    height: 100%;
    width: 0%; /* JS kontrol edecek */
    border-radius: 6px;
    transition: width var(--anim-duration-normal) var(--anim-easing-decelerate), background-color var(--transition-speed) var(--transition-easing);
    will-change: width;
    box-shadow: none; /* İç gölge kaldırıldı */
}

/* Durum Mesajı - Daha Küçük ve Sağda */
#stats-status-message {
    font-weight: 500;
    transition: all var(--transition-speed) var(--anim-easing-elegant);
    font-size: calc(var(--font-size-sm) * 0.85); /* Daha küçük font */
    padding: var(--space-xxs) var(--space-s); /* Azaltılmış padding */
    border-radius: var(--border-radius-sm);
    color: var(--text-primary);
    background-color: transparent; /* Arka plan yok */
    border: none; /* Kenarlık yok */
    text-align: right; /* Sağa hizalı */
    flex-basis: auto; /* Otomatik genişlik */
    margin: 0; /* Margin sıfırlandı */
    order: 99; /* En sağa almak için yüksek order */
    box-shadow: none; /* Gölge yok */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis; /* Taşarsa ... ile kes */
    max-width: 200px; /* Maksimum genişlik */
}

/* Renklendirme sınıfları sadece metin rengini etkilesin */
.success-message { color: var(--success) !important; background: none !important; border: none !important; box-shadow: none !important; }
.improvement-message { color: var(--warning) !important; background: none !important; border: none !important; box-shadow: none !important; }
.final-review-message { color: var(--text-secondary) !important; background: none !important; border: none !important; box-shadow: none !important; }


.progress-stat-container {
    width: 180px; /* Adjusted width */
    text-align: center; font-size: var(--font-size-sm); color: var(--text-muted);
    line-height: 1.2; transition: color var(--transition-speed) var(--transition-easing);
}
#stats-round-progress {
    font-weight: 600; color: var(--accent-primary); display: block;
    margin-top: var(--space-xxs); min-height: 1.2em;
    transition: color var(--transition-speed) var(--transition-easing), opacity var(--transition-speed) var(--transition-easing);
    font-size: 1.1em; /* Adjusted size */
    /* Opacity handled by animation */
}
#progress-bar-track {
    background-color: var(--surface-4); border-radius: 10px; /* Slightly less rounded */
    height: 10px; /* Slightly thinner */
    width: 100%; margin-top: var(--space-xs); overflow: hidden; position: relative;
    transition: background-color var(--transition-speed) var(--transition-easing);
    box-shadow: var(--shadow-inset);
}

/* Simplified progress bar animation */
@keyframes progress-stripes-simple {
  from { background-position: 1rem 0; }
  to { background-position: 0 0; }
}

#progress-bar-fill {
    background-color: var(--accent-primary);
    background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem; /* Adjusted stripes */
    height: 100%; width: 0%; border-radius: 10px;
    transition: width var(--anim-duration-slow) var(--anim-easing-decelerate), background-color var(--transition-speed) var(--transition-easing);
    animation: progress-stripes-simple 1s linear infinite; /* Simplified animation */
    will-change: width;
    box-shadow: inset 0 -1px 1px rgba(0,0,0,0.1); /* Simpler shadow */
}
body.dark-mode #progress-bar-fill {
    background-image: linear-gradient(45deg, rgba(0, 0, 0, 0.2) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.2) 75%, transparent 75%, transparent);
    box-shadow: inset 0 -1px 1px rgba(0,0,0,0.2);
}

.quiz-main-content {
    width: 94%; max-width: 850px; /* Slightly narrower */
    margin: var(--space-xl) auto; /* Removed XXL top margin, XL all around */
    flex-grow: 1;
}
#quiz-container,
#result-container,
#learning-offer-container,
#learning-round-container,
#final-review-container {
    background-color: color-mix(in srgb, var(--bg-overlay) 96%, transparent);
    backdrop-filter: blur(10px) saturate(105%); /* Adjusted filter */
    -webkit-backdrop-filter: blur(10px) saturate(105%);
    padding: var(--space-xl); /* Adjusted padding */
    border-radius: var(--border-radius-lg); /* Adjusted radius */
    box-shadow: var(--shadow-lg); /* Adjusted shadow */
    margin-bottom: var(--space-xl); display: none; text-align: center;
    animation: popIn 0.7s var(--anim-easing-elegant) both; /* Adjusted animation */
    transition: background-color var(--transition-speed) var(--transition-easing), box-shadow var(--transition-speed) var(--transition-easing), border-color var(--transition-speed) var(--transition-easing);
    border: 1px solid var(--border-1);
}
#quiz-container { display: block; } /* Initial state */

/* Shared heading styles */
#quiz-container h2, #result-container h2, #learning-offer-container h3, #learning-round-container h3, #final-review-container h3 {
    color: var(--text-primary); margin-bottom: var(--space-l); font-weight: 600; /* Adjusted weight */
    line-height: 1.3; letter-spacing: -1px; /* Adjusted spacing */
    transition: color var(--transition-speed) var(--transition-easing);
    text-align: center; font-size: var(--font-size-xl); position: relative;
    padding-bottom: var(--space-m); /* Adjusted padding */
}
#quiz-container h2::after, #result-container h2::after, #learning-offer-container h3::after, #learning-round-container h3::after, #final-review-container h3::after {
    content: ''; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 80px; height: 5px; /* Adjusted size */
    background: linear-gradient(90deg, color-mix(in oklch, var(--accent-primary) l c h / 0.1), var(--accent-primary), color-mix(in oklch, var(--accent-primary) l c h / 0.1));
    border-radius: 2px; transition: background var(--transition-speed) var(--transition-easing), width 0.4s var(--anim-easing-elegant); opacity: 0.9; filter: blur(0.5px); /* Adjusted opacity/blur */
}
#quiz-container:hover h2::after, #result-container:hover h2::after, #learning-offer-container:hover h3::after, #learning-round-container:hover h3::after, #final-review-container:hover h3::after {
    width: 120px; /* Adjusted hover width */
}

Tamam, yeni kurgumuzun üçüncü adımına geçiyoruz.

Yeni Kurgu - Adım 3: Quiz İçi Elemanlar (Soru, Seçenekler, Düğmeler)

Bu adımda, quiz kutularının içine yerleşen ana elemanların (soru metni, cevap seçenekleri, kontrol/devam düğmeleri, geri bildirim alanı) stillerini yeni düzene uygun şekilde tanımlayacağız. Önceki iyileştirmelerdeki sadeleştirmeleri koruyacağız.

İşte bu yeni kurgunun üçüncü adımı için CSS kodları:

CSS

/* --- Yeni Kurgu: Quiz İçi Eleman Stilleri --- */

#question {
    font-size: calc(var(--font-size-base) * 1.15); /* Biraz daha büyük soru metni */
    margin-bottom: var(--space-l);
    min-height: 40px; /* Daha az min yükseklik */
    color: var(--text-primary);
    text-align: left;
    line-height: 1.65; /* Ayarlanmış satır yüksekliği */
    font-weight: 500;
    transition: color var(--transition-speed) var(--transition-easing), background-color var(--transition-speed) var(--transition-easing);
    padding: var(--space-m);
    background-color: var(--surface-2); /* Arka plan rengi */
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-inset); /* Sadece iç gölge */
    border-left: 4px solid var(--accent-primary); /* Vurgu kenarlığı */
}

#options {
    display: flex;
    flex-direction: column;
    gap: var(--space-s); /* Seçenekler arası boşluk */
    margin-bottom: var(--space-l); /* Düğmeden önce boşluk */
}

.option-label {
    display: flex;
    align-items: center;
    padding: var(--space-m) calc(var(--space-l) + var(--space-m)) var(--space-m) var(--space-m); /* Ayarlanmış padding */
    background-color: var(--surface-3);
    border: 1px solid var(--border-2);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    transition: transform var(--anim-duration-fast) ease, background-color var(--anim-duration-fast) ease, border-color var(--anim-duration-fast) ease, box-shadow var(--anim-duration-fast) ease; /* Hızlı geçiş */
    text-align: left;
    position: relative;
    overflow: hidden;
    box-shadow: var(--shadow-sm); /* Hafif gölge */
}
.option-label:hover {
    border-color: var(--accent-primary-hover);
    background-color: var(--surface-4);
    transform: translateX(4px); /* Hafif hover efekti */
    box-shadow: var(--shadow-md);
}
.option-label:has(input:checked) {
    border-color: var(--accent-primary);
    background-color: var(--surface-accent);
    box-shadow: var(--shadow-md);
    transform: none; /* Seçiliyken transform yok */
    /* Basit pulse animasyonu kaldırıldı, daha sade */
    /* animation: checked-simple-pulse 0.8s var(--anim-easing-standard); */
}
.option-label input[type="radio"] {
    margin-right: var(--space-m);
    flex-shrink: 0;
    transform: scale(1.25);
    cursor: pointer;
    accent-color: var(--accent-primary);
    transition: transform 0.2s ease;
}
.option-label:hover input[type="radio"] {
    transform: scale(1.35);
}
.option-label span:not(.feedback-icon) {
    color: var(--text-secondary);
    flex-grow: 1;
    line-height: 1.55; /* Ayarlanmış satır yüksekliği */
    transition: color var(--transition-speed) var(--transition-easing);
}
.option-label:has(input:checked) span:not(.feedback-icon) {
    color: var(--text-primary);
    font-weight: 500; /* Daha normal ağırlık */
}

/* Correct/Incorrect/Disabled stilleri önceki haliyle benzer, animasyonlar sade */
.option-label.correct-option { background-color: var(--success-bg) !important; border-color: var(--success) !important; box-shadow: 0 2px 6px color-mix(in oklch, var(--success) l c h / 0.2), var(--shadow-inset) !important; transform: scale(1.01) !important; }
.option-label.correct-option span:not(.feedback-icon) { color: var(--success); font-weight: 600;} /* Doğru cevap belirgin */
.option-label.correct-option:hover { background-color: color-mix(in srgb, var(--success-bg) 85%, black 4%) !important; transform: scale(1.01) translateX(4px) !important; }

.option-label.incorrect-option { background-color: var(--error-bg) !important; border-color: var(--error) !important; opacity: 0.95; box-shadow: 0 2px 6px color-mix(in oklch, var(--error) l c h / 0.2), var(--shadow-inset) !important; transform: scale(1.01) !important; }
.option-label.incorrect-option span:not(.feedback-icon) { color: var(--error); }
.option-label.incorrect-option:hover { background-color: color-mix(in srgb, var(--error-bg) 85%, black 4%) !important; transform: scale(1.01) translateX(4px) !important; }
.option-label.incorrect-option.user-selected { opacity: 1.0; }
.option-label.incorrect-option.user-selected span:not(.feedback-icon) { font-weight: 500; } /* Yanlış seçilen normal ağırlık */

.options-disabled .option-label { pointer-events: none; opacity: 0.6; filter: grayscale(30%); } /* Daha belirgin disabled */
.options-disabled .option-label:hover { transform: none; box-shadow: var(--shadow-sm); background-color: var(--surface-3); border-color: var(--border-2); }
.options-disabled .option-label.correct-option, .options-disabled .option-label.user-selected.incorrect-option { opacity: 1; filter: none;} /* Seçilen/doğru olanlar görünür kalsın */

/* Feedback icon stilleri önceki haliyle benzer, animasyon sade */
.feedback-icon {
    position: absolute; right: var(--space-m); top: 50%;
    transform: translateY(-50%) scale(0.8); font-size: 1.5em;
    font-weight: bold; opacity: 0; will-change: transform, opacity;
    transition: color 0.3s ease; filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.1));
}
.option-label.correct-option .feedback-icon.correct,
.option-label.incorrect-option.user-selected .feedback-icon.incorrect {
    animation: scaleInSimple 0.4s var(--anim-easing-elastic) forwards;
}
@keyframes scaleInSimple { /* Önceki adımdan sade animasyon */
    from { opacity: 0; transform: translateY(-50%) scale(0.5); }
    to { opacity: 1; transform: translateY(-50%) scale(1); }
}
.feedback-icon.correct { color: var(--success); }
.feedback-icon.incorrect { color: var(--error); }
.option-label:focus-visible {
    border-color: var(--border-focus);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), 0 0 0 calc(var(--focus-ring-offset) + var(--focus-ring-width)) var(--focus-ring-color), var(--shadow-md);
}


/* Quiz Düğmeleri (Önceki adımdan sadeleştirilmiş halleri) */
.quiz-main-content button:not(.explanation-toggle) {
    padding: var(--space-s) var(--space-xl); /* Biraz daha kompakt padding */
    font-size: calc(var(--font-size-sm) * 0.95); /* Biraz daha küçük font */
    font-weight: 600;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    margin-top: var(--space-m); /* Seçeneklerden sonraki boşluk */
    margin-right: var(--space-s);
    transition: all var(--transition-speed) var(--anim-easing-elegant);
    box-shadow: var(--shadow-md), var(--shadow-highlight);
    vertical-align: middle; line-height: 1.4; position: relative; overflow: hidden;
    z-index: 1; background-size: 250% auto; letter-spacing: 0.6px; /* Azaltılmış harf aralığı */
    text-transform: uppercase; will-change: transform, box-shadow;
    border: 1px solid transparent;
}
.quiz-main-content button:not(.explanation-toggle):last-child { margin-right: 0; }
.quiz-main-content button:not(.explanation-toggle) {
    background-image: linear-gradient(120deg, var(--accent-primary-active) 0%, var(--accent-primary) 40%, var(--accent-primary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-primary-active) 40%, black 50%);
}
.quiz-main-content button:not(.explanation-toggle).secondary {
    background-image: linear-gradient(120deg, var(--accent-secondary-active) 0%, var(--accent-secondary) 40%, var(--accent-secondary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-secondary-active) 40%, black 50%);
}
.quiz-main-content button:not(.explanation-toggle):hover {
    background-position: 100% center;
    transform: translateY(-3px) scale(1.03); /* Daha sade hover */
    box-shadow: var(--shadow-lg), var(--shadow-highlight); /* Daha sade hover gölge */
    color: var(--text-on-accent);
    border-color: transparent;
}
.quiz-main-content button:not(.explanation-toggle):active {
    transform: translateY(0px) scale(0.99); /* Daha sade active */
    box-shadow: var(--shadow-sm), var(--shadow-inset);
    background-position: left center;
    transition-duration: var(--anim-duration-fast);
}
.quiz-main-content button:not(.explanation-toggle):disabled {
    background-image: none !important;
    background-color: var(--surface-3) !important;
    color: var(--text-muted) !important;
    cursor: not-allowed;
    box-shadow: var(--shadow-inset) !important;
    transform: none !important;
    opacity: var(--disabled-opacity);
    border-color: var(--border-secondary) !important;
}
.quiz-main-content button:not(.explanation-toggle).secondary:disabled {
    background-color: var(--surface-3) !important;
}
.quiz-main-content button:not(.explanation-toggle):focus-visible {
    background-position: 100% center;
    border-color: var(--border-focus);
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), var(--shadow-lg);
}


/* Feedback Alanı */
#feedback {
    display: none; /* JS kontrol edecek */
    margin-top: var(--space-m);
    font-weight: 500;
    font-size: var(--font-size-base);
    padding: var(--space-s);
    border-radius: var(--border-radius-md);
    text-align: center;
    box-shadow: var(--shadow-sm);
    /* Renk/Arka Plan JS ile ayarlanacak */
}
/* --- Yeni Kurgu: Sonuç/Öğrenme Ekranları --- */

/* Giriş paragrafları için stil (Yeni Kurgu Adım 2'den miras alınır) */
#result-container p:first-of-type,
#learning-offer-container p:first-of-type,
#final-review-container > p:first-of-type {
    font-size: var(--font-size-lg);
    line-height: 1.7; margin-bottom: var(--space-l);
    text-align: center;
    color: var(--text-secondary);
    transition: color var(--transition-speed) ease-in-out;
    padding: 0 var(--space-m);
}

#score-info {
    font-weight: 500; font-size: var(--font-size-base); /* Boyut ayarlandı */
    color: var(--text-primary);
    text-align: center; margin-bottom: var(--space-l); line-height: 1.6; /* Ayarlandı */
    background-color: var(--surface-2); padding: var(--space-m); /* Ayarlandı */
    border-radius: var(--border-radius-md); border: 1px solid var(--border-2); /* Ayarlandı */
    transition: color var(--transition-speed) ease-in-out, background-color var(--transition-speed) ease-in-out, border-color var(--transition-speed) ease-in-out;
    box-shadow: var(--shadow-inset);
}

#learning-round-container, #final-review-container {
    text-align: left;
    background-color: color-mix(in srgb, var(--bg-tertiary) 98%, transparent);
    backdrop-filter: blur(8px) saturate(100%);
    -webkit-backdrop-filter: blur(8px) saturate(100%);
    border-radius: var(--border-radius-lg);
}

.learning-item {
    margin-bottom: var(--space-l);
    padding: var(--space-m);
    border-bottom: 1px solid var(--border-secondary);
    transition: border-color var(--transition-speed) ease-in-out, background-color 0.2s ease; /* Hızlandırıldı */
    border-radius: var(--border-radius-sm); /* Daha küçük radius */
    background-color: transparent; /* Ana arka planı kullansın */
}
.learning-item:hover {
     background-color: var(--surface-2); /* Hover'da hafif arka plan */
}
.learning-item:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: var(--space-m); }
.learning-item h4 {
    font-size: var(--font-size-base); /* Ayarlandı */
    color: var(--text-primary);
    margin-bottom: var(--space-s); line-height: 1.4; font-weight: 600;
    transition: color var(--transition-speed) ease-in-out;
}
.learning-item .answer-line {
    margin-bottom: var(--space-xs); /* Daha az boşluk */
    font-size: calc(var(--font-size-base) * 0.95); /* Ayarlandı */
    color: var(--text-secondary); display: flex; align-items: baseline; /* Baseline hizalama */
    flex-wrap: wrap;
    gap: var(--space-xs); /* Ayarlandı */
    transition: color var(--transition-speed) ease-in-out;
    line-height: 1.5;
}
.learning-item .correct-answer, .learning-item .user-answer-incorrect {
    padding: 1px var(--space-xs); /* Daha kompakt padding */
    border-radius: var(--border-radius-sm);
    font-weight: 500; /* Ayarlandı */
    display: inline-flex; align-items: center; gap: calc(var(--space-xs) / 2);
    transition: background-color var(--transition-speed) ease-in-out, color var(--transition-speed) ease-in-out, border-color var(--transition-speed) ease-in-out;
    box-shadow: none; /* Gölge kaldırıldı */
    font-size: calc(var(--font-size-base) * 0.9); /* Ayarlandı */
    border-width: 1px; /* Kenarlık kalınlığı */
}
.learning-item .correct-answer::before { content: '✔'; margin-right: 2px; font-size: 0.9em; }
.learning-item .user-answer-incorrect::before { content: '✘'; margin-right: 2px; font-size: 0.9em; }

.learning-item .correct-answer { color: var(--success); background-color: var(--success-bg); border-color: var(--success-border); }
.learning-item .user-answer-incorrect { color: var(--error); background-color: var(--error-bg); border-color: var(--error-border); font-style: normal; }

.learning-item .explanation {
    font-size: calc(var(--font-size-base)*0.9); color: var(--text-muted); margin-top: var(--space-s); /* Daha muted renk */
    font-style: normal; line-height: 1.6; padding: var(--space-s); /* Ayarlandı */
    background-color: color-mix(in srgb, var(--surface-3) 50%, transparent); /* Daha transparan arka plan */
    border-radius: var(--border-radius-sm); border: 1px solid var(--border-primary);
    display: none; /* JS kontrol edecek */
    animation: fadeInExplanationSimple 0.5s var(--anim-easing-standard); /* Ayarlandı */
    transition: all var(--transition-speed) ease-in-out;
    box-shadow: var(--shadow-inset);
}
@keyframes fadeInExplanationSimple { /* Önceki adımdan */
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Açıklama Göster/Gizle Butonu - Ana Buton Stili (Mavi Görünüm İçin) */
button.explanation-toggle {
    /* Ana butonlardan temel stilleri alalım */
    padding: var(--space-s) var(--space-l); /* Padding'i diğer butonlara benzer yapalım */
    font-size: calc(var(--font-size-sm) * 0.95); /* Font boyutunu biraz büyütelim */
    font-weight: 600;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    margin: 0;
    margin-right: var(--space-s); /* Yanındaki butondan boşluk için */
    transition: all var(--transition-speed) var(--anim-easing-elegant);
    box-shadow: var(--shadow-sm), var(--shadow-highlight);
    vertical-align: middle;
    line-height: 1.4;
    position: relative;
    overflow: hidden;
    z-index: 1;
    background-size: 250% auto;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    will-change: transform, box-shadow;
    border: 1px solid transparent;
    display: inline-block; /* İkon olmayacağı için */
    text-align: center;

    /* Birincil buton (Mavi Gradient) görünümünü uygula */
    background-image: linear-gradient(120deg, var(--accent-primary-active) 0%, var(--accent-primary) 40%, var(--accent-primary-hover) 100%);
    color: var(--text-on-accent); /* Beyaz yazı */
    border-color: color-mix(in srgb, var(--accent-primary-active) 40%, black 50%);
}

/* İkon stillerini kaldırabiliriz veya yorumda bırakabiliriz */
/*
button.explanation-toggle i.fas {
    display: none;
}
*/

button.explanation-toggle:hover {
    background-position: 100% center;
    transform: translateY(-2px) scale(1.02);
    box-shadow: var(--shadow-md), var(--shadow-highlight);
    color: var(--text-on-accent);
    border-color: transparent;
}

button.explanation-toggle:active {
    transform: translateY(0px) scale(0.99);
    box-shadow: var(--shadow-sm), var(--shadow-inset);
    background-position: left center;
    transition-duration: var(--anim-duration-fast);
}

button.explanation-toggle:focus-visible {
    background-position: 100% center;
    border-color: var(--border-focus);
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), var(--shadow-lg);
}

/* Kontrol container'ı içindeki hizalamayı koru */
.learning-item-controls {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-s);
    margin-top: var(--space-s);
    align-items: center;
}


/* Öğrenme/Sonuç ekranlarındaki ana butonlar (Quiz içi butonlarla aynı stil) */
#learning-offer-container button,
#learning-round-container button:not(.explanation-toggle),
#result-container button,
#final-review-container button {
    /* Stil quiz içi butonlardan miras alınır veya kopyalanır */
    padding: var(--space-s) var(--space-xl);
    font-size: calc(var(--font-size-sm) * 0.95);
    font-weight: 600;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    margin-top: var(--space-l); /* Üst boşluk */
    margin-right: var(--space-s);
    transition: all var(--transition-speed) var(--anim-easing-elegant);
    box-shadow: var(--shadow-md), var(--shadow-highlight);
    vertical-align: middle; line-height: 1.4; position: relative; overflow: hidden;
    z-index: 1; background-size: 250% auto; letter-spacing: 0.6px;
    text-transform: uppercase; will-change: transform, box-shadow;
    border: 1px solid transparent;
}
#learning-offer-container button:last-child,
#learning-round-container button:not(.explanation-toggle):last-child,
#result-container button:last-child,
#final-review-container button:last-child { margin-right: 0; }

#learning-offer-container button:first-of-type,
#learning-round-container button:not(.explanation-toggle),
#result-container button:first-of-type,
#final-review-container button {
    background-image: linear-gradient(120deg, var(--accent-primary-active) 0%, var(--accent-primary) 40%, var(--accent-primary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-primary-active) 40%, black 50%);
}
#learning-offer-container button.secondary,
#result-container button.secondary {
    background-image: linear-gradient(120deg, var(--accent-secondary-active) 0%, var(--accent-secondary) 40%, var(--accent-secondary-hover) 100%);
    color: var(--text-on-accent);
    border-color: color-mix(in srgb, var(--accent-secondary-active) 40%, black 50%);
}

/* Hover/Active/Focus/Disabled stilleri quiz içi butonlarla aynı */
#learning-offer-container button:hover,
#learning-round-container button:not(.explanation-toggle):hover,
#result-container button:hover,
#final-review-container button:hover {
    background-position: 100% center;
    transform: translateY(-3px) scale(1.03);
    box-shadow: var(--shadow-lg), var(--shadow-highlight);
    color: var(--text-on-accent);
    border-color: transparent;
}
/* ... (Active, Disabled, Focus-visible stilleri de eklenebilir veya quiz içi butonlardan miras alınır) ... */

#learning-round-container button:not(.explanation-toggle),
#final-review-container button:not(.explanation-toggle) {
    display: block; margin: var(--space-l) auto 0 auto; /* Ortalamak için */
}


/* --- Tema Değiştirme Düğmesi (Sadeleştirilmiş) --- */
@keyframes pulseSimpleGlow { /* Önceki adımdan */
    0%, 100% { box-shadow: var(--shadow-lg); filter: brightness(1); transform: scale(1); }
    50% { box-shadow: var(--shadow-xl), 0 0 15px 4px color-mix(in oklch, var(--accent-primary) l c h / 0.15); filter: brightness(1.05); transform: scale(1.05); }
}

#theme-toggle-btn {
    position: fixed; bottom: var(--space-m); right: var(--space-m); /* Daha yakın konum */
    z-index: 1001;
    background: var(--surface-3); /* Sade arka plan */
    color: var(--text-secondary);
    border: 1px solid var(--border-primary);
    border-radius: 50%;
    width: 48px; height: 48px; /* Daha küçük boyut */
    font-size: 1.5rem; /* Daha küçük ikon */
    cursor: pointer;
    box-shadow: var(--shadow-md); /* Daha sade gölge */
    transition: all var(--transition-speed) var(--anim-easing-elegant);
    display: flex; justify-content: center; align-items: center;
    padding: 0; margin: 0;
    animation: pulseSimpleGlow 6s infinite ease-in-out; /* Sade animasyon */
    will-change: transform, box-shadow, filter;
    overflow: hidden;
}
#theme-toggle-btn:hover {
    background: var(--surface-4);
    color: var(--accent-primary-hover);
    box-shadow: var(--shadow-lg);
    transform: scale(1.1) rotate(-15deg); /* Daha az rotasyon */
    animation-play-state: paused;
    border-color: var(--border-hover);
    filter: brightness(1.05);
}
#theme-toggle-btn:active {
    transform: scale(1.0) rotate(0deg); /* Daha sade active */
    box-shadow: var(--shadow-md), var(--shadow-inset);
    animation-play-state: paused;
    transition-duration: var(--anim-duration-fast);
    filter: brightness(1);
}
#theme-toggle-btn:focus-visible {
    animation-play-state: paused;
    border-color: var(--border-focus);
    outline: calc(var(--focus-ring-width) - 1px) solid var(--focus-ring-color); /* Daha ince outline */
    box-shadow: 0 0 0 var(--focus-ring-offset) var(--bg-secondary), var(--shadow-lg);
    filter: brightness(1);
}
#theme-toggle-btn span {
    display: inline-block;
    transition: transform 0.3s var(--anim-easing-standard); /* Ayarlandı */
}
#theme-toggle-btn:hover span {
     transform: scale(1.1) rotate(5deg); /* Daha az ikon rotasyonu */
}


/* --- Yeni Kurgu: Duyarlılık Ayarları --- */

/* Varsayılan (Mobil üstü) */
body.quiz-active {
    padding-top: 55px; /* İnce stat bar yüksekliği */
}

/* ======================================== */
/* === Mobil Menü ve İlgili Stiller ====== */
/* ======================================== */

/* --- Hamburger Butonu --- */
.mobile-menu-toggle {
    display: none; /* Varsayılan olarak gizli (media query ile block yapılır) */
    background: none;
    border: none;
    color: var(--text-primary); /* Header metin rengiyle uyumlu */
    font-size: 1.8rem; /* İkon boyutu */
    padding: var(--space-xs);
    cursor: pointer;
    z-index: 1001; /* Diğer header elemanlarının üzerinde */
    transition: color var(--anim-duration-fast) ease, transform var(--anim-duration-fast) ease;
}
.mobile-menu-toggle:hover {
    color: var(--accent-primary); /* Hover rengi */
    transform: scale(1.1);
}

/* --- Mobil Navigasyon Konteyneri (.mobile-nav) --- */
.mobile-nav {
    display: none; /* Aktif değilken gizli */
    position: fixed;
    inset: 0; /* top, right, bottom, left: 0 -> Tam ekran */
    background-color: color-mix(in srgb, var(--surface-1) 96%, transparent); /* Hafif transparan arka plan */
    backdrop-filter: blur(12px) saturate(110%);
    -webkit-backdrop-filter: blur(12px) saturate(110%);
    z-index: 1999; /* Yüksek z-index (modalın altında olabilir) */
    padding: var(--space-xl) 0; /* Üst/Alt boşluk XL, yanlar 0 (içerik kendi padding'ini alacak) */
    overflow-y: auto; /* İçerik sığmazsa dikey scroll */
    flex-direction: column; /* Ana eksen dikey */
    justify-content: space-between; /* İçeriği dikeyde yay (linkler üstte, eylemler altta) */
    align-items: center; /* İçeriği yatayda ortala */
    transform: translateX(100%); /* Başlangıçta ekranın sağında */
    transition: transform var(--anim-duration-normal) var(--anim-easing-elegant),
                opacity var(--anim-duration-normal) ease; /* Opacity geçişi eklendi */
    opacity: 0; /* Başlangıçta görünmez */
    box-shadow: -5px 0px 25px rgba(0,0,0,0.15); /* Daha belirgin gölge */
}
body.dark-mode .mobile-nav {
    box-shadow: -5px 0px 25px rgba(0,0,0,0.4);
}

/* Menü Aktif Olduğunda */
body.mobile-menu-active .mobile-nav {
    display: flex; /* Göster ve flex özelliklerini uygula */
    transform: translateX(0%); /* Ekrana kaydır */
    opacity: 1; /* Görünür yap */
}

/* --- Kapatma Butonu (Sağ Üst Köşe) --- */
.mobile-menu-close-btn {
    position: absolute; /* Konteynerine göre konumlanır */
    top: var(--space-m); /* Üstten boşluk */
    right: var(--space-l); /* Sağdan boşluk */
    background: none;
    border: none;
    font-size: 2.5rem; /* Daha büyük çarpı */
    font-weight: 300; /* Daha ince çarpı */
    color: var(--text-muted);
    cursor: pointer;
    padding: var(--space-xs); /* Tıklama alanını biraz büyüt */
    line-height: 1;
    transition: color var(--anim-duration-fast) ease, transform var(--anim-duration-fast) ease;
    z-index: 2000; /* Menü içeriğinin üzerinde */
}
.mobile-menu-close-btn:hover {
    color: var(--error); /* Kapatma butonu hover'da kırmızı olabilir */
    transform: scale(1.15) rotate(90deg);
}

/* --- Mobil Navigasyon Linkleri --- */
.mobile-nav ul {
    list-style: none;
    padding: 0 var(--space-l); /* Yanlardan iç boşluk */
    margin: var(--space-xl) 0 0 0; /* Üstten boşluk (kapatma butonundan sonra) */
    text-align: center; /* Metni ortala */
    width: 100%; /* Konteyner genişliğini kullan */
    flex-grow: 1; /* Dikeyde mümkün olduğunca alan kaplasın (eylemleri aşağı iter) */
}
.mobile-nav li {
    margin-bottom: var(--space-m); /* Linkler arası boşluk */
}
.mobile-nav li:last-child {
    margin-bottom: 0;
}
.mobile-nav a {
    text-decoration: none;
    color: var(--text-secondary);
    font-size: var(--font-size-lg);
    font-weight: 500;
    padding: var(--space-m) var(--space-l);
    display: block;
    border-radius: var(--border-radius-md);
    transform: translateX(0);

    /* --- YENİ EKLENEN/GÜNCELLENEN SATIRLAR --- */
    background-color: var(--surface-2); /* Hafif bir arka plan rengi */
    border: 1px solid var(--border-2);  /* İnce bir kenarlık */
    box-shadow: var(--shadow-sm);       /* Çok hafif bir derinlik hissi (isteğe bağlı) */
    transition: background-color var(--anim-duration-fast) ease,
                color var(--anim-duration-fast) ease,
                transform var(--anim-duration-fast) ease,
                border-color var(--anim-duration-fast) ease, /* Border rengi geçişi eklendi */
                box-shadow var(--anim-duration-fast) ease;   /* Gölge geçişi eklendi */
    /* --- EKLEMELER SONU --- */
}

.mobile-nav a:hover {
    color: var(--accent-primary);
    background-color: var(--surface-3); /* Hover arka planını biraz değiştirdik */
    border-color: var(--accent-primary); /* Hover'da kenarlık rengi */
    transform: translateX(5px) translateY(-1px); /* Hafif yukarı kalkma efekti */
    box-shadow: var(--shadow-md); /* Hover'da gölgeyi biraz artır */
}

/* Aktif sayfa linki için stil (opsiyonel, JS ile class eklenmeli) */
.mobile-nav a.current-page {
    color: var(--accent-primary);
    font-weight: 600;
    background-color: var(--surface-accent); /* Aktif arka plan */
    border-color: var(--accent-primary); /* Aktif kenarlık */
    box-shadow: var(--shadow-inset); /* Aktifken içe dönük gölge */
}
.mobile-nav a:hover {
    color: var(--accent-primary);
    background-color: var(--surface-accent);
    transform: translateX(5px); /* Hover'da hafif sağa kayma efekti */
}
/* Aktif sayfa linkini belirtmek isterseniz (JS ile class eklenmeli) */
.mobile-nav a.current-page {
    color: var(--accent-primary);
    font-weight: 600;
    background-color: var(--surface-accent);
}

/* --- Mobil Navigasyon Eylemleri (Arama, Tema) --- */
.mobile-nav-actions {
    display: flex;
    flex-direction: column; /* Alt alta */
    align-items: center; /* Ortala */
    gap: var(--space-m); /* Aralarındaki boşluk */
    width: 90%; /* Genişlik */
    max-width: 350px; /* Maksimum genişlik */
    margin-top: var(--space-xl); /* Üstteki linklerden sonra boşluk */
    padding-bottom: var(--space-xl); /* En alttan boşluk */
}

/* Mobil menüdeki butonların stilleri */
.mobile-nav .search-icon-btn,
.mobile-nav #theme-toggle-mobile {
     padding: var(--space-m); /* İç boşluk */
     font-size: var(--font-size-base);
     font-weight: 500;
     border-radius: var(--border-radius-md);
     cursor: pointer;
     background-color: var(--surface-3); /* Hafif farklı arka plan */
     color: var(--text-secondary);
     border: 1px solid var(--border-2);
     width: 100%; /* Tam genişlik */
     text-align: center;
     display: flex; /* İkon ve metni hizalamak için */
     align-items: center;
     justify-content: center;
     gap: var(--space-s); /* İkon ve metin arası boşluk */
     transition: all var(--anim-duration-fast) var(--anim-easing-standard);
     box-shadow: var(--shadow-sm);
}
.mobile-nav .search-icon-btn:hover,
.mobile-nav #theme-toggle-mobile:hover {
    background-color: var(--surface-4);
    color: var(--accent-primary);
    border-color: var(--accent-primary);
    transform: translateY(-2px); /* Hafif yukarı kalkma efekti */
    box-shadow: var(--shadow-md);
}
.mobile-nav .search-icon-btn:active,
.mobile-nav #theme-toggle-mobile:active {
    transform: translateY(0px);
    box-shadow: var(--shadow-inset);
}

/* ======================================== */
/* === Mobil Menü Stilleri Sonu ========= */
/* ======================================== */

/* === Medya Sorguları === */

/* Geniş Ekranlar (Küçük Ayarlamalar) */
@media (max-width: 1200px) {
    .container { width: 95%; }
    .card-grid { grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr)); } /* Kart min genişlik ayarı */
}


/* Tablet ve Küçük Laptoplar (Mobil Menü Başlangıcı) */
@media (max-width: 992px) {
    html { scroll-snap-type: y proximity; }
    .container { padding-left: var(--space-l); padding-right: var(--space-l); } /* Padding ayarı */

    /* Masaüstü Nav & Eylemleri Gizle, Hamburger Göster */
    #main-header nav, #header-actions {
        display: none;
    }
    .mobile-menu-toggle {
        display: block; /* Hamburger ikonunu göster */
    }

    #main-header .container {
         /* Logo solda, hamburger sağda kalması için justify-content yeterli */
         gap: var(--space-l); /* Logo ve ikon arası boşluk */
    }

    /* Quiz aktifken body padding (stat bar yüksekliği 55px idi) */
    body.quiz-active {
        padding-top: 55px;
    }

    /* Stat bar'da küçük ayarlamalar */
    #stats-container {
        gap: var(--space-xs);
        padding: var(--space-xs) 3%;
        height: 55px;
    }
    .stat-item { font-size: calc(var(--font-size-sm) * 0.85); }
    .score-value { min-width: 40px; padding: 1px 3px; }
    #stats-status-message { max-width: 150px; font-size: calc(var(--font-size-sm) * 0.8); }
    .progress-stat-container { min-width: 120px; padding: 0 var(--space-s); }
    #stats-round-progress { font-size: calc(var(--font-size-sm) * 0.85); }

    /* Quiz alanı */
    .quiz-main-content {
        max-width: 90%;
        margin-top: calc(55px + var(--space-l));
    }
    #quiz-container, #result-container, #learning-offer-container, #learning-round-container, #final-review-container {
        padding: var(--space-l);
    }

    /* Kartlar */
    .card-grid { grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr)); }
    .card:hover { transform: translateY(-6px) scale(1.02); }
}


/* Dikey Tablet ve Büyük Telefonlar */
@media (max-width: 768px) {
    html { scroll-snap-type: none; }
    .container { padding-left: var(--space-m); padding-right: var(--space-m); }

    /* Statik header mobil menü butonuyla */
    #main-header {
        padding: var(--space-s) 0;
    }

    /* Quiz aktifken body padding (Stat bar hala fixed) */
    body.quiz-active {
        padding-top: 55px;
    }

    /* Stat bar (tablet) */
    #stats-container {
        justify-content: flex-start; /* Soldan başla */
        gap: var(--space-s);
        height: 55px;
    }
     .progress-stat-container { order: 10; padding: 0; min-width: 100px; }
     #stats-status-message { order: 5; text-align: left; max-width: 120px; }

    /* Quiz Alanı */
    .quiz-main-content {
        max-width: 95%;
        margin: calc(55px + var(--space-m)) auto var(--space-xl) auto; /* Üst boşluk ayarı */
    }
     #quiz-container, #result-container, #learning-offer-container, #learning-round-container, #final-review-container {
        padding: var(--space-m); /* Daha az padding */
        border-radius: var(--border-radius-md);
    }
     #question { font-size: var(--font-size-base); }
     #options label { padding: var(--space-s) var(--space-m); font-size: var(--font-size-sm); } /* Seçenek padding/font */
     .quiz-main-content button:not(.explanation-toggle) { width: 100%; margin-right: 0; padding: var(--space-s); font-size: var(--font-size-sm); }

     /* Öğrenme ekranı */
     .learning-item { padding: var(--space-s); }
     .learning-item h4 { font-size: var(--font-size-base); }
     .learning-item .answer-line { flex-direction: column; align-items: flex-start; gap: var(--space-xxs); }
     button.explanation-toggle, button.feedback-btn { margin-left: 0; margin-top: var(--space-xs); }

    /* Kartlar */
    .card-grid { grid-template-columns: 1fr; gap: var(--space-l); } /* Tek sütun */
    .card:hover { transform: translateY(-5px); } /* Basit hover */

    /* Hero Alanı */
     #hero { min-height: auto; padding: var(--space-xl) 0; }
     #hero h2 { font-size: clamp(1.8rem, 1.5rem + 4.5vw, 2.8rem); }
     #hero p { font-size: clamp(1rem, 1rem + 1.6vw, 1.3rem); }

     /* Tema Düğmesi */
    #theme-toggle-btn { width: 44px; height: 44px; font-size: 1.4rem; bottom: var(--space-s); right: var(--space-s); }
}


/* Küçük Telefonlar */
@media (max-width: 520px) {
    .container { padding-left: var(--space-s); padding-right: var(--space-s); }

    /* Stat bar sarsın ve yükselsin */
    #stats-container {
        flex-wrap: wrap;
        height: auto; /* Yüksekliği içeriğe bırak */
        min-height: 65px; /* İki satır için min yükseklik */
        padding: var(--space-xs) 3%;
        justify-content: space-around; /* Sarınca daha iyi boşluk */
        align-items: center; /* Dikey ortala */
        gap: var(--space-xs);
    }
    .progress-stat-container { order: 100; width: 100%; margin-top: var(--space-xs); min-width: auto; padding: 0; }
    #stats-status-message { order: 1; max-width: 60%; flex-basis: auto; font-size: calc(var(--font-size-sm) * 0.75); }
    .stat-item { flex-basis: auto; font-size: calc(var(--font-size-sm) * 0.8); gap: 1px;}
    .stat-item span:not(.score-value):not(:first-child) { padding: 1px 3px; }
    .score-value { min-width: 35px; padding: 1px 3px; }
    /* Çok küçük ekranda skorları gizleyebiliriz */
    /* .stat-item:nth-of-type(5), .stat-item:nth-of-type(6), .stat-item:nth-of-type(7) { display: none; } */

    body.quiz-active {
        padding-top: 70px; /* Stat bar yüksekliğine göre ayarla (tahmini) */
    }

    /* Quiz Alanı */
    .quiz-main-content {
        width: 96%;
        margin: calc(70px + var(--space-s)) auto var(--space-l) auto; /* Üst boşluk ayarı */
    }
     #quiz-container, #result-container, #learning-offer-container, #learning-round-container, #final-review-container {
        padding: var(--space-s);
        border-radius: var(--border-radius-sm);
    }
     #question { font-size: calc(var(--font-size-base) * 0.9); padding: var(--space-xs); }
     #options label { padding: var(--space-s); font-size: calc(var(--font-size-sm) * 0.95); }
     .option-label input[type="radio"] { transform: scale(1.1); margin-right: var(--space-xs); }
     .feedback-icon { right: var(--space-xs); font-size: 1.2em; }

    /* Hero & Butonlar */
    #hero h2 { font-size: clamp(1.6rem, 1.5rem + 4vw, 2.2rem); letter-spacing: -0.5px; }
    #hero p { font-size: calc(var(--font-size-base)*0.95); }
    .btn { width: calc(100% - var(--space-m)); margin: var(--space-s) auto; padding: var(--space-s); font-size: calc(var(--font-size-sm)*0.9); }

    /* Tema Düğmesi */
    #theme-toggle-btn { width: 40px; height: 40px; font-size: 1.3rem; bottom: var(--space-xs); right: var(--space-xs); }
}    </style>
</head>
<body>

<header id="main-header">
        <div class="container">
            <div class="logo-container">
                <a href="#hero"> <h1>Uzm.Dr. Sait Ramazan Gülbay</h1></a>
            </div>
            <nav aria-label="Ana Gezinti">
                <ul>
                    <li><a href="#hero" id="nav-home" class="active" aria-current="page">Ana Sayfa</a></li>
                    <li><a href="#konular" id="nav-konular">Konu Anlatımları</a></li>
                    <li><a href="#quizler" id="nav-quizler">Quizler</a></li>
                    <li><a href="#hakkinda" id="nav-hakkinda">Hakkında</a></li>
                </ul>
            </nav>
            <div id="header-actions">
                <button class="search-icon-btn" aria-label="Ara">
                    <i class="fas fa-search" aria-hidden="true"></i>
                </button>
            </div>

            <button class="mobile-menu-toggle" aria-label="Menüyü Aç/Kapat" aria-expanded="false">
                <i class="fas fa-bars" aria-hidden="true"></i>
            </button>

        </div> </header>

    <div class="mobile-nav" id="mobile-navigation" aria-hidden="true">
        <button class="mobile-menu-close-btn" aria-label="Menüyü Kapat">&times;</button>
        <ul>
            <li><a href="#hero">Ana Sayfa</a></li>
            <li><a href="#konular">Konu Anlatımları</a></li>
            <li><a href="#quizler">Quizler</a></li>
            <li><a href="#hakkinda">Hakkında</a></li>
        </ul>
        <div class="mobile-nav-actions">
            <button class="search-icon-btn" aria-label="Ara (Mobil)">
                 <i class="fas fa-search" aria-hidden="true"></i> Ara
            </button>
            <button id="theme-toggle-mobile" aria-label="Temayı Değiştir (Mobil)">
                 <span>🌓</span>
            </button>
        </div>
    </div>
    <div id="homepage-content">
        <section id="hero" aria-labelledby="hero-heading">
            <div class="container">
                <h2 id="hero-heading">Tıp ve Diş Hekimliği Öğrencileri İçin Gelişmiş Eğitim Kaynakları</h2>
                <p>Güncel, interaktif ders materyalleri, sunumlar ve akıllı quizlerle öğrenme deneyiminizi zenginleştirin.</p>
                <a href="#konular" class="btn btn-secondary">Konu Anlatımları (Geliştiriliyor)</a>
                <a href="#quizler" class="btn btn-primary">İnteraktif Quizler</a>
            </div>
        </section>

        <main class="container">
            <section id="konular" class="content-section" aria-labelledby="konular-heading">
                <h2 id="konular-heading"><i class="fas fa-book-open" aria-hidden="true"></i> Konu Anlatımları</h2>
                <div id="construction-message" role="alert">
                    <p><i class="fas fa-wrench" aria-hidden="true"></i> Bu bölüm geliştirme aşamasındadır. Yakında kapsamlı ders notları ve sunumlar eklenecektir. Anlayışınız için teşekkürler!</p>
                </div>
            </section>
            </main>
    </div>
<section id="quizler" class="content-section" aria-labelledby="quizler-heading">
                <h2 id="quizler-heading"><i class="fas fa-question-circle" aria-hidden="true"></i> İnteraktif Quizler</h2>
                <div class="card-grid">
                    <article class="card quiz-card" aria-labelledby="quiz-title-demo">
                        <div class="card-icon"><i class="fas fa-shield-alt" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-demo">Demo</h3>
                        <p>İmmünolojinin temelleri ve immün sistemin hücresel elemanları hakkında bilginizi test edin.</p>
                        <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('demo');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-immunoloji_giris_hucreler">
                        <div class="card-icon"><i class="fas fa-shield-alt" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-immunoloji_giris_hucreler">İmmünolojiye Giriş ve İmmün Sistem Hücreleri</h3>
                        <p>İmmünolojinin temelleri ve immün sistemin hücresel elemanları hakkında bilginizi test edin.</p>
                        <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('immunoloji_giris_hucreler');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-antikorlar">
                        <div class="card-icon"><i class="fas fa-shield-virus" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-antikorlar">Antikorlar</h3>
                        <p>İmmünoglobulinlerin yapısı, sınıfları ve fonksiyonları üzerine odaklanın.</p>
                        <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('antikorlar');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-dogal_immun_yanit">
                         <div class="card-icon"><i class="fas fa-fire" aria-hidden="true"></i></div>
                         <h3 id="quiz-title-dogal_immun_yanit">Doğal İmmün Yanıt</h3>
                         <p>Doğuştan gelen bağışıklık mekanizmalarını, reseptörlerini ve kompleman sistemini test edin.</p>
                         <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                         <a href="#" onclick="event.preventDefault(); startQuiz('dogal_immun_yanit');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-kazanilmis_immun_yanit">
                         <div class="card-icon"><i class="fas fa-bullseye" aria-hidden="true"></i></div>
                         <h3 id="quiz-title-kazanilmis_immun_yanit">Kazanılmış İmmün Yanıt</h3>
                         <p>Lenfosit olgunlaşması, aktivasyonu, MHC molekülleri ve aşırı duyarlılık reaksiyonları bilginizi ölçün.</p>
                         <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                         <a href="#" onclick="event.preventDefault(); startQuiz('kazanilmis_immun_yanit');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-anaeroblar">
                        <div class="card-icon"><i class="fas fa-lungs-virus" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-anaeroblar">Anaeroblar</h3>
                        <p>Oksijensiz ortamda yaşayan bakteriler ve neden oldukları enfeksiyonlar.</p>
                       <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('anaeroblar');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-spiroketler">
                        <div class="card-icon"><i class="fas fa-bacteria" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-spiroketler">Spiroketler</h3>
                        <p>Treponema, Borrelia ve Leptospira gibi önemli spiroketler ve ilişkili hastalıklar.</p>
                       <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('spiroketler');" class="card-link">Quizi Başlat</a>
                    </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-gram_negatif_non_fermenter_basiller">
                         <div class="card-icon"><i class="fas fa-vial" aria-hidden="true"></i></div>
                         <h3 id="quiz-title-gram_negatif_non_fermenter_basiller">Gram Negatif Non-fermenter Basiller</h3>
                         <p>Pseudomonas, Burkholderia, Acinetobacter ve Stenotrophomonas türleri.</p>
                        <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                         <a href="#" onclick="event.preventDefault(); startQuiz('gram_negatif_non_fermenter_basiller');" class="card-link">Quizi Başlat</a>
                    </article>
                     <article class="card quiz-card" aria-labelledby="quiz-title-gram_negatif_koklar">
                         <div class="card-icon"><i class="fas fa-dot-circle" aria-hidden="true"></i></div>
                         <h3 id="quiz-title-gram_negatif_koklar">Gram Negatif Koklar</h3>
                         <p>Neisseria (Meningokok, Gonokok) ve Moraxella türleri hakkında bilgiler.</p>
                         <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                         <a href="#" onclick="event.preventDefault(); startQuiz('gram_negatif_koklar');" class="card-link">Quizi Başlat</a>
                     </article>
                    <article class="card quiz-card" aria-labelledby="quiz-title-mikobakteriler">
                        <div class="card-icon"><i class="fas fa-microscope" aria-hidden="true"></i></div>
                        <h3 id="quiz-title-mikobakteriler">Mikobakteriler</h3>
                        <p>Tüberküloz, lepra etkenleri ve atipik mikobakteriler.</p>
                       <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                        <a href="#" onclick="event.preventDefault(); startQuiz('mikobakteriler');" class="card-link">Quizi Başlat</a>
                    </article>
                     <article class="card quiz-card" aria-labelledby="quiz-title-gram_pozitif_basiller">
                         <div class="card-icon"><i class="fas fa-bacterium" aria-hidden="true"></i></div>
                         <h3 id="quiz-title-gram_pozitif_basiller">Gram Pozitif Basiller</h3>
                         <p>Bacillus, Clostridium, Listeria, Corynebacterium ve diğerleri.</p>
                         <div class="audience-tags"><span class="audience-tag diş">Diş</span></div>
                         <a href="#" onclick="event.preventDefault(); startQuiz('gram_pozitif_basiller');" class="card-link">Quizi Başlat</a>
                     </article>
                </div>
            </section>

            <section id="hakkinda" class="content-section" aria-labelledby="hakkinda-heading">
                 <h2 id="hakkinda-heading"><i class="fas fa-info-circle" aria-hidden="true"></i> Hakkında</h2>
                 <p style="text-align: center; max-width: 650px; margin: 0 auto; line-height: 1.8;">Mikrobiyoloji eğitim materyalleri geliştirerek öğretime katkıda bulunmak, mikrobiyoloji öğretimini bir adım daha ileriye taşımak için çalışıyoruz. Bilgiyi interaktif ve erişilebilir kılma hedefiyle... İşimiz vaktimizden çok.</p>
            </section>
        </main> </div> <div id="stats-container" style="display: none;" aria-live="polite" role="status">
        <div class="stat-item"><span>Tur:</span> <span id="stats-current-round">-</span></div>
        <div class="progress-stat-container">
            <span>Tur İlerleme:</span> <span id="stats-round-progress">-</span>
            <div id="progress-bar-track" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" aria-labelledby="stats-round-progress"><div id="progress-bar-fill" style="width: 0%;"></div></div>
        </div>
        <div class="stat-item"><span>Doğru:</span> <span id="stats-round-correct">0</span></div>
        <div class="stat-item"><span>Yanlış:</span> <span id="stats-round-incorrect">0</span></div>
        <div class="stat-item"><span>1. Tur:</span> <span id="stats-round1-score" class="score-value">-</span></div>
        <div class="stat-item"><span>2. Tur:</span> <span id="stats-round2-score" class="score-value">-</span></div>
        <div class="stat-item"><span>Final Tur:</span> <span id="stats-round3-score" class="score-value">-</span></div>
        <div id="stats-status-message" class="stat-item">Durum: Başlatılıyor...</div>
    </div>

    <div class="quiz-main-content" style="display: none;" role="region" aria-label="Quiz Alanı">
        <div id="quiz-container" style="display: none;">
             <h2 id="quiz-title" aria-live="assertive">Quiz Başlığı Yükleniyor...</h2> <div id="question" aria-live="assertive">Soru yükleniyor...</div>
             <div id="options" role="radiogroup" aria-labelledby="question"></div>
             <button id="submit-btn">Cevabı Kontrol Et</button>
             <div id="feedback" style="display: none;" aria-live="assertive"></div>
        </div>

        <div id="learning-offer-container" style="display: none;" aria-labelledby="offer-title">
            <h3 id="offer-title">Tur Değerlendirmesi</h3>
            <p id="offer-message">Öğrenme fırsatı mesajı burada görünecek.</p>
            <button id="start-learning-btn">Öğretim Turunu Başlat</button>
            <button id="start-next-test-btn" class="secondary">Sonraki Tur Sorularını Çöz</button>
        </div>

        <div id="learning-round-container" style="display: none;" aria-labelledby="learning-title">
            <h3 id="learning-title">Öğrenme Turu</h3>
            <p>Bu turda yanlış yanıtladığınız soruların doğru cevapları ve açıklamaları aşağıdadır.</p>
            <div id="learning-content">
                </div>
            <button id="continue-to-next-test-btn">Sonraki Tur Sorularını Çöz</button>
        </div>

        <div id="result-container" style="display: none;" aria-labelledby="result-heading">
            <h2 id="result-heading">Test Tamamlandı!</h2>
            <p id="score-info">Skor bilgisi yükleniyor...</p>
            <p id="final-message">Sonuç mesajı burada görünecek.</p>
            <button id="show-final-review-btn">Tüm Soruları ve Cevapları İncele</button>
            <button onclick="goHome();" class="secondary">Ana Sayfaya Dön</button>
        </div>

        <div id="final-review-container" style="display: none;" aria-labelledby="final-review-heading">
             <h3 id="final-review-heading">Tüm Sorular ve Cevaplar</h3>
             <p>Testteki tüm soruların doğru cevaplarını ve açıklamalarını aşağıda bulabilirsiniz.</p>
             <div id="final-review-content">
                 </div>
             <button onclick="goHome();">Ana Sayfaya Dön</button>
        </div>
    </div> <footer id="main-footer">
        <div class="container">
            <p><small>&copy; <span id="copyright-year">2025</span> Uzm.Dr. Sait Ramazan Gülbay. Tüm hakları saklıdır.</small></p>
            </div>
    </footer>

    <button id="theme-toggle-btn" aria-label="Temayı Değiştir">
        <span>🌓</span> </button>
<div id="search-modal" class="search-modal-overlay" aria-hidden="true">
    <div class="search-modal-content" role="dialog" aria-modal="true" aria-labelledby="search-modal-title">
        <button id="search-modal-close" class="search-modal-close-btn" aria-label="Aramayı Kapat">&times;</button>
        <h2 id="search-modal-title" class="sr-only">İçerik Ara</h2>
        <div class="search-input-container">
            <i class="fas fa-search search-modal-icon" aria-hidden="true"></i>
            <input type="search" id="search-modal-input" placeholder="Quiz veya konu ara...">
        </div>
        <div id="search-modal-results" class="search-results-container">
            <p class="search-placeholder">Aramak için en az 2 karakter girin...</p>
        </div>
    </div>
</div>
<style> .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border-width: 0; } </style>
  <script>  
// --- Quiz Soruları Verisi ---
const quizData = {
    'demo': { // 17-İmmünolojiye Giriş ve İmmün Sistem Hücreleri v2.pptx'den
        title: "İmmünoloji Temelleri", // Daha açıklayıcı bir başlık
        questions: [
            { id: 'demo_q1', question: "1. Patojenle İlişkili Moleküler Kalıplar (PAMP) için hangisi örnek değildir?", options: ["Lipopolisakkarit (LPS)", "Peptidoglikan", "Çift iplikli RNA", "Monosodyum ürat kristalleri", "Fungal glikanlar"], correctAnswer: "Monosodyum ürat kristalleri", explanation: "Monosodyum ürat kristalleri, hücre hasarı sonucu ortaya çıkan DAMP'lara (Hasarla İlişkili Moleküler Kalıplar) örnektir. Diğerleri PAMP'tır." },
            { id: 'demo_q2', question: "2. Doğal immün yanıt ve kazanılmış immün yanıt arasındaki farklardan hangisi yanlıştır?", options: ["Kazanılmış immün yanıtta izotip değişimi ve antikor üretimi vardır", "Doğal immün yanıtta doğuştan gelen bellek hücreleri sayesinde bakterilere karşı spesifik yanıt vardır", "Kazanılmış yanıtın ana hücre grubu lenfositlerdir", "Doğal yanıt ilk karşılaşmada gelişen ama daha etkisiz olan yanıttır", "Bir yaratılış mucizesi olarak kazanılmış yanıttaki bellek hücreleri çok fazla sayıda etkene karşı özelleşebilecek kabiliyettedir"], correctAnswer: "Doğal immün yanıtta doğuştan gelen bellek hücreleri sayesinde bakterilere karşı spesifik yanıt vardır", explanation: "Doğal immün yanıtın hafızası yoktur ve her karşılaşmada aynı şekilde yanıt verir; spesifik bellek kazanılmış yanıta özgüdür." },
            { id: 'demo_q3', question: "3. Hümoral immüniteden sorumlu temel hücre tipi hangisidir?", options: ["T helper lenfosit", "Sitotoksik T lenfosit", "NK hücresi", "B lenfosit", "Makrofaj"], correctAnswer: "B lenfosit", explanation: "B lenfositler ve onların ürünü olan antikorlar hümoral immüniteden sorumludur ve genellikle hücre dışı mikroorganizmalara karşı etkilidir." },
            { id: 'demo_q4', question: "4. Hücresel immüniteden sorumlu temel hücre tipi hangisidir?", options: ["B lenfosit", "Plazma hücresi", "T lenfosit", "Mast hücresi", "Bazofil"], correctAnswer: "T lenfosit", explanation: "T lenfositler (hem Helper hem Sitotoksik) hücresel immüniteden sorumludur ve özellikle hücre içi mikroorganizmalara ve tümör hücrelerine karşı etkilidir." }
            // Daha fazla soru eklenebilir...
        ]
    },
    // Başka quizler buraya eklenebilir. Örnek:
    /*
    'bakteriyoloji': {
        title: "Temel Bakteriyoloji",
        questions: [
             { id: 'bakteri_q1', question: "...", options: ["...", "..."], correctAnswer: "...", explanation: "..." },
             // ...
        ]
    }
    */
};

// --- Quiz Durum Değişkenleri ---
let currentQuizId = null;
let currentQuizData = null; // Aktif quizin başlığını ve sorularını tutar
let currentRound = 'INIT'; // 'INIT', 'TEST_1', 'LEARN_1_OFFER', 'LEARN_1', 'TEST_2', 'LEARN_2_OFFER', 'LEARN_2', 'TEST_3', 'RESULTS', 'FINAL_REVIEW'
let questionsForRound = []; // Mevcut tur için sorular
let incorrectInRound1 = []; // 1. turdaki yanlışlar
let incorrectInRound2 = []; // 2. turdaki yanlışlar
let currentQuestionIndexInRound = 0; // Mevcut turdaki soru indeksi
let userAnswers = {}; // { questionId: userAnswer, ... } Kullanıcı cevaplarını saklar

// İstatistikler objesi
let stats = {
    round1Correct: 0, round1Incorrect: 0,
    round2Correct: 0, round2Incorrect: 0,
    round3Correct: 0,
    round1Score: 0, round2Score: 0, round3Score: 0,
    round1TotalQuestions: 0,
    round2TotalQuestions: 0, round3TotalQuestions: 0,
    currentRoundCorrect: 0, currentRoundIncorrect: 0,
    currentRoundTotal: 0,
    statusMessage: "Başlatılıyor..."
};

// --- DOM Element Referansları ---
const statsCurrentRoundEl = document.getElementById('stats-current-round');
const statsRoundProgressEl = document.getElementById('stats-round-progress');
const statsRoundCorrectEl = document.getElementById('stats-round-correct');
const statsRoundIncorrectEl = document.getElementById('stats-round-incorrect');
const statsRound1ScoreEl = document.getElementById('stats-round1-score');
const statsRound2ScoreEl = document.getElementById('stats-round2-score');
const statsRound3ScoreEl = document.getElementById('stats-round3-score');
const statsStatusMessageEl = document.getElementById('stats-status-message');
const progressBarTrackEl = document.getElementById('progress-bar-track'); // aria değerleri için
const progressBarFillEl = document.getElementById('progress-bar-fill');

const quizContainerEl = document.getElementById('quiz-container');
const quizTitleEl = document.getElementById('quiz-title');
const questionEl = document.getElementById('question');
const optionsEl = document.getElementById('options');
const submitBtn = document.getElementById('submit-btn');
const feedbackEl = document.getElementById('feedback');

const learningOfferContainerEl = document.getElementById('learning-offer-container');
const offerTitleEl = document.getElementById('offer-title');
const offerMessageEl = document.getElementById('offer-message');
const startLearningBtn = document.getElementById('start-learning-btn');
const startNextTestBtn = document.getElementById('start-next-test-btn');

const learningRoundContainerEl = document.getElementById('learning-round-container');
const learningTitleEl = document.getElementById('learning-title');
const learningContentEl = document.getElementById('learning-content');
const continueToNextTestBtn = document.getElementById('continue-to-next-test-btn');

const resultContainerEl = document.getElementById('result-container');
const scoreInfoEl = document.getElementById('score-info');
const finalMessageEl = document.getElementById('final-message');
const showFinalReviewBtn = document.getElementById('show-final-review-btn');

const finalReviewContainerEl = document.getElementById('final-review-container');
const finalReviewContentEl = document.getElementById('final-review-content');

const homepageContentEl = document.getElementById('homepage-content'); // Ana sayfa içeriği (hero vs.)
const mainContentContainerEl = document.querySelector('main.container'); // #konular, #hakkinda içeren <main>
const quizlerSectionEl = document.getElementById('quizler'); // Quiz kartlarının olduğu bölüm
const statsContainerEl = document.getElementById('stats-container');
const quizMainContentEl = document.querySelector('.quiz-main-content'); // Quiz arayüzünün ana sarmalayıcısı

const themeToggleButton = document.getElementById('theme-toggle-btn');
const themeToggleMobileBtn = document.getElementById('theme-toggle-mobile'); // Mobil tema butonu

const searchModal = document.getElementById('search-modal');
const searchInput = document.getElementById('search-modal-input');
const searchResultsContainer = document.getElementById('search-modal-results');
const searchCloseBtn = document.getElementById('search-modal-close');
const headerSearchBtn = document.querySelector('#main-header .search-icon-btn'); // Header'daki arama ikonu
const mobileSearchBtn = document.querySelector('.mobile-nav .search-icon-btn'); // Mobil menüdeki arama ikonu

const mobileMenuToggleBtn = document.querySelector('.mobile-menu-toggle');
const mobileNav = document.querySelector('.mobile-nav');
const mobileMenuCloseBtn = document.querySelector('.mobile-menu-close-btn');

const hakkindaSectionEl = document.getElementById('hakkinda');

// --- Yardımcı Fonksiyonlar (Animasyon, Renk vb.) ---
function getScoreColor(score) {
    const clampedScore = Math.max(0, Math.min(100, score));
    const hue = clampedScore * 1.2; // 0 (red) to 120 (green)
    const saturation = 45 + clampedScore * 0.5; // Increase saturation with score
    const lightness = 48 + clampedScore * 0.07; // Adjust lightness slightly
    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
}

function animateValue(element, start, end, duration) {
    if (!element) return;
    const startValue = (start === '-' || isNaN(parseFloat(start))) ? 0 : parseFloat(start);
    const endValue = Math.round(end);
    // Eğer başlangıç ve bitiş değeri aynıysa ve elementin içeriği zaten bitiş değeri+% ise animasyon yapma
    if (startValue === endValue && element.textContent === endValue + '%') return;
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const currentValue = Math.floor(progress * (endValue - startValue) + startValue);
        element.textContent = currentValue + '%';
        element.style.color = getScoreColor(currentValue);
        if (progress < 1) {
            window.requestAnimationFrame(step);
        } else {
            // Son değeri ve rengi ayarla
            element.textContent = endValue + '%';
            element.style.color = getScoreColor(endValue);
        }
    };
    window.requestAnimationFrame(step);
}

function animateIntegerChange(element, endValue, duration = 300) {
    if (!element) return;
    const startValueText = element.textContent;
    // Başlangıç değeri sayı değilse 0 kabul et
    const startValue = isNaN(parseInt(startValueText, 10)) ? 0 : parseInt(startValueText, 10);
    const finalEndValue = parseInt(endValue, 10);
    if (startValue === finalEndValue) return; // Değişiklik yoksa animasyon yapma
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const currentValue = Math.floor(progress * (finalEndValue - startValue) + startValue);
        element.textContent = currentValue;
        if (progress < 1) {
            window.requestAnimationFrame(step);
        } else {
            element.textContent = finalEndValue; // Son değeri tam olarak ayarla
        }
    };
    window.requestAnimationFrame(step);
}

function animateProgressText(element, currentNumber, totalNumber, duration = 300) {
    if (!element || totalNumber <= 0) {
        if (element) element.textContent = "-"; return;
    }
    // Mevcut metinden başlangıç sayısını al (örn: "5/10")
    const match = element.textContent.match(/(\d+)\/(\d+)/);
    const startNumber = match ? parseInt(match[1], 10) : 0;
    // Gösterilecek son mevcut sayıyı toplam sayı ile sınırla
    const finalCurrentNumberToShow = Math.min(parseInt(currentNumber, 10), parseInt(totalNumber, 10));
    const finalTotalNumber = parseInt(totalNumber, 10);

    // Eğer metin zaten hedef durumu yansıtıyorsa (toplam dahil) animasyon yapma
    if (element.textContent === `${finalCurrentNumberToShow}/${finalTotalNumber}`) return;

    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const animatedCurrentValue = Math.floor(progress * (finalCurrentNumberToShow - startNumber) + startNumber);
        element.textContent = `${animatedCurrentValue}/${finalTotalNumber}`;

        if (progress < 1) {
            window.requestAnimationFrame(step);
        } else {
            // Son değeri tam olarak ayarla
            element.textContent = `${finalCurrentNumberToShow}/${finalTotalNumber}`;
        }
    };
    window.requestAnimationFrame(step);
}

function getStatusMessageClass(message) {
    if (!message) return "";
    if (message.includes("Mükemmel") || message.includes("Başarılı") || message.includes("Çok iyi") || message.includes("Harika")) return "success-message";
    if (message.includes("gayret") || message.includes("gerekli") || message.includes("Tamamlandı") || message.includes("önerilir")) return "improvement-message";
    if (message.includes("Sonuç") || message.includes("İnceleme") || message.includes("Seçim Bekleniyor")) return "info-message"; // Daha genel bir durum için info
    return ""; // Varsayılan sınıf yok
}

// Fisher-Yates (aka Knuth) Shuffle Algoritması
function shuffleArray(array) {
    let currentIndex = array.length, randomIndex;
    // Kalan elementler varken...
    while (currentIndex > 0) {
        // Kalan bir elementi seç...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
        // Ve mevcut elementle değiştir.
        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]];
    }
    return array;
}

// Debounce fonksiyonu: Bir fonksiyonun belirli bir süre içinde tekrar çağrılmasını engeller
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};

// --- Temel UI Kontrol Fonksiyonları ---

// Quiz içindeki farklı containerları göster/gizle
function showQuizContainer(containerId) {
    const containers = [
        quizContainerEl, resultContainerEl, learningOfferContainerEl,
        learningRoundContainerEl, finalReviewContainerEl
    ];
    containers.forEach(container => {
        if (container) {
            container.style.display = (container.id === containerId) ? 'block' : 'none';
        }
    });
    // Scroll işlemi burada değil, quiz görünümüne geçildiğinde (startQuiz içinde) yapılmalı
}

// İstatistik panelini güncelle
function updateStatsDisplay(animate = false, animationDuration = 300) {
    if (!statsContainerEl || statsContainerEl.style.display === 'none') return; // Panel görünür değilse güncelleme

    let roundText = "-";
    switch (currentRound) {
        case 'TEST_1': roundText = "1. Tur"; break;
        case 'LEARN_1_OFFER': roundText = "1. Tur Sonu"; break;
        case 'LEARN_1': roundText = "Öğrenme (1)"; break; // Tur numarasını belirt
        case 'TEST_2': roundText = "2. Tur"; break;
        case 'LEARN_2_OFFER': roundText = "2. Tur Sonu"; break;
        case 'LEARN_2': roundText = "Öğrenme (2)"; break; // Tur numarasını belirt
        case 'TEST_3': roundText = "Final Tur"; break;
        case 'RESULTS': roundText = "Sonuç"; break;
        case 'FINAL_REVIEW': roundText = "İnceleme"; break;
        case 'INIT':
        default: roundText = "Başlıyor";
    }
    if (statsCurrentRoundEl) statsCurrentRoundEl.textContent = roundText;

    // İlerleme Metni & Barı
    const currentDisplayNumber = currentQuestionIndexInRound + 1; // Gösterilecek soru no (1'den başlar)
    const totalForRound = stats.currentRoundTotal;
    let progressText = "-";
    let progressPercent = 0;

    if (currentRound.startsWith('TEST_') && totalForRound > 0) {
        // İlerlemeyi, mevcut soru sayısını geçmeyecek şekilde ayarla
        const currentProgressNumber = Math.min(currentQuestionIndexInRound, totalForRound);
        progressText = `${currentProgressNumber}/${totalForRound}`; // Tur bitince 10/10 yerine, son sorudan sonra 10/10 göstermeli
        progressPercent = Math.min(100, (currentProgressNumber / totalForRound) * 100);

        // Soru yüklendiğinde index 0 olur, ama 1/X görünmeli, cevap kontrol edilince index 1 olur ama hala 1/X görünmeli, sonraki soruya geçerken 2/X görünmeli
        // Bu yüzden animasyonu soru yüklenirken ve cevap kontrol edildikten sonra değil, doğrudan loadQuestion ve checkAnswer içinde yönetmek daha doğru olabilir.
        // Şimdilik burada bırakalım, ama ileride ince ayar gerekebilir.
        if (animate) {
             // animateProgressText çağrısı index'i kullanmalı, display number değil
             animateProgressText(statsRoundProgressEl, currentQuestionIndexInRound, totalForRound, animationDuration);
        } else {
             if (statsRoundProgressEl) statsRoundProgressEl.textContent = `${Math.min(currentDisplayNumber, totalForRound)}/${totalForRound}`; // Statik güncelleme için display number kullan
        }
        if(progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', Math.round(progressPercent));
    } else {
        // Test olmayan turlarda ilerleme sıfırla
        if (statsRoundProgressEl) statsRoundProgressEl.textContent = '-';
        if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);
    }
    // Progress bar fill animasyonsuz güncellenebilir veya CSS transition ile halledilebilir.
    if (progressBarFillEl) progressBarFillEl.style.width = `${progressPercent}%`;


    // Mevcut Tur Doğru/Yanlış Sayıları
    if (animate) {
        animateIntegerChange(statsRoundCorrectEl, stats.currentRoundCorrect, animationDuration);
        animateIntegerChange(statsRoundIncorrectEl, stats.currentRoundIncorrect, animationDuration);
    } else {
        if (statsRoundCorrectEl) statsRoundCorrectEl.textContent = (currentRound.startsWith('TEST_') || currentRound === 'RESULTS' || currentRound === 'FINAL_REVIEW') ? stats.currentRoundCorrect : '-';
        if (statsRoundIncorrectEl) statsRoundIncorrectEl.textContent = (currentRound.startsWith('TEST_') || currentRound === 'RESULTS' || currentRound === 'FINAL_REVIEW') ? stats.currentRoundIncorrect : '-';
    }

    // Tur Skorlarını Göster/Gizle ve Animate Et (finishRound içinde tetiklenecek)
    const displayScore = (el, score, roundNum, totalQuestionsInRound) => {
        if (!el) return;
         // Skorun gösterilip gösterilmeyeceğini belirle
        let shouldDisplay = false;
        if (roundNum === 1 && stats.round1TotalQuestions > 0 && (currentRound !== 'INIT' && currentRound !== 'TEST_1')) {
            shouldDisplay = true; // 1. tur bittikten sonra göster
        } else if (roundNum === 2 && stats.round2TotalQuestions > 0 && (currentRound === 'LEARN_2_OFFER' || currentRound === 'LEARN_2' || currentRound === 'TEST_3' || currentRound === 'RESULTS' || currentRound === 'FINAL_REVIEW')) {
            shouldDisplay = true; // 2. tur bittikten sonra göster
        } else if (roundNum === 3 && stats.round3TotalQuestions > 0 && (currentRound === 'RESULTS' || currentRound === 'FINAL_REVIEW')) {
            shouldDisplay = true; // 3. tur bittikten sonra (yani sonuçlarda) göster
        }


        if (shouldDisplay) {
             // AnimateValue zaten renk ve % ekliyor, burada sadece textContent'i '-' den farklı bir şeye set edip animateValue'yu çağırmak yeterli (finishRound içinde)
             // Animasyonsuz durumda direkt göster
             if (!animate) {
                 el.textContent = Math.round(score) + '%';
                 el.style.color = getScoreColor(score);
             } else if(el.textContent === '-' || el.textContent === '0%') { // '-' den veya '0%' dan başlarken animasyon olsun
                 // animateValue finishRound içinde çağrılacak
             } else { // Zaten bir değer varsa statik güncelle
                 el.textContent = Math.round(score) + '%';
                 el.style.color = getScoreColor(score);
             }
        } else {
            el.textContent = '-';
            el.style.color = ''; // Rengi sıfırla
        }
    };

    // Skorları güncelle (animasyon finishRound'da tetiklenir)
    displayScore(statsRound1ScoreEl, stats.round1Score, 1, stats.round1TotalQuestions);
    displayScore(statsRound2ScoreEl, stats.round2Score, 2, stats.round2TotalQuestions);
    displayScore(statsRound3ScoreEl, stats.round3Score, 3, stats.round3TotalQuestions);

    // Durum Mesajı
    if (statsStatusMessageEl) {
        statsStatusMessageEl.textContent = stats.statusMessage;
        // Mesaja göre CSS sınıfı ekle/kaldır
        statsStatusMessageEl.className = `stat-item ${getStatusMessageClass(stats.statusMessage)}`;
    }
}
// --- Quiz Mantığı Fonksiyonları ---

function initializeQuiz(selectedQuizId, selectedQuizTitle, selectedQuestions) {
    console.log(`Quiz Başlatılıyor: ${selectedQuizId}`);
    currentQuizId = selectedQuizId;
    currentQuizData = quizData[selectedQuizId]; // Seçilen quiz verisini sakla
    currentRound = 'TEST_1';
    // Soruları karıştırarak kopyasını al
    questionsForRound = shuffleArray([...selectedQuestions]);
    incorrectInRound1 = [];
    incorrectInRound2 = [];
    currentQuestionIndexInRound = 0;
    userAnswers = {}; // Kullanıcı cevaplarını sıfırla
    // İstatistikleri sıfırla
    stats = {
        round1Correct: 0, round1Incorrect: 0,
        round2Correct: 0, round2Incorrect: 0,
        round3Correct: 0,
        round1Score: 0, round2Score: 0, round3Score: 0,
        round1TotalQuestions: questionsForRound.length,
        round2TotalQuestions: 0, round3TotalQuestions: 0, // Bunlar ilgili turlar başlayınca set edilecek
        currentRoundCorrect: 0, currentRoundIncorrect: 0,
        currentRoundTotal: questionsForRound.length,
        statusMessage: "1. Tur Devam Ediyor..."
    };

    if (feedbackEl) { // Geri bildirim alanını temizle
        feedbackEl.textContent = '';
        feedbackEl.className = '';
        feedbackEl.style.display = 'none';
    }
    if (quizTitleEl) quizTitleEl.textContent = selectedQuizTitle; // Quiz başlığını ayarla

    // Skor göstergelerini ve ilerleme çubuğunu sıfırla
    [statsRound1ScoreEl, statsRound2ScoreEl, statsRound3ScoreEl].forEach(el => {
        if (el) { el.textContent = '-'; el.style.color = ''; }
    });
    if (progressBarFillEl) progressBarFillEl.style.width = '0%';
    if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);


    updateStatsDisplay(false); // Başlangıç istatistiklerini göster (animasyonsuz)
    showQuizContainer('quiz-container'); // Soru konteynerını göster
    loadQuestion(); // İlk soruyu yükle
}

function loadQuestion() {
    if (feedbackEl) feedbackEl.style.display = 'none'; // Varsa eski geri bildirimi gizle
    if (optionsEl) optionsEl.classList.remove('options-disabled'); // Seçenekleri tekrar aktif et

    // Turdaki tüm sorular bittiyse turu bitir
    if (currentQuestionIndexInRound >= questionsForRound.length) {
        if (progressBarFillEl) progressBarFillEl.style.width = '100%'; // Barı %100 yap
        if(progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 100);
        // İlerleme metnini X/X yap (örneğin 10/10)
        if (stats.currentRoundTotal > 0 && statsRoundProgressEl) {
             statsRoundProgressEl.textContent = `${stats.currentRoundTotal}/${stats.currentRoundTotal}`;
        }
        updateStatsDisplay(false); // Son istatistikleri göster
        setTimeout(finishRound, 100); // Kısa bir gecikme ile turu bitir
        return;
    }

    // Mevcut soruyu al
    const currentQuestion = questionsForRound[currentQuestionIndexInRound];
    if (!currentQuestion) {
        console.error("Soru yüklenemedi, index:", currentQuestionIndexInRound);
        goHome(); // Hata durumunda ana sayfaya dön
        return;
    }

    if (questionEl) questionEl.innerHTML = currentQuestion.question; // Soru metnini yaz
    if (optionsEl) optionsEl.innerHTML = ''; // Eski seçenekleri temizle

    // Seçenekleri karıştır
    const shuffledOptions = shuffleArray([...currentQuestion.options]);

    // Seçenekleri radio buton olarak oluştur
    shuffledOptions.forEach((option, index) => {
        const optionId = `option_${currentQuestion.id}_${index}`; // Benzersiz ID
        const label = document.createElement('label');
        label.htmlFor = optionId;
        label.classList.add('option-label');

        const input = document.createElement('input');
        input.type = 'radio';
        input.id = optionId;
        input.name = `option_${currentQuestion.id}`; // Aynı soru için aynı name
        input.value = option;

        const span = document.createElement('span');
        span.textContent = option; // Seçenek metni

        // Geri bildirim ikonları (başlangıçta gizli)
        const correctIcon = document.createElement('span');
        correctIcon.classList.add('feedback-icon', 'correct');
        correctIcon.innerHTML = '&#10004;'; // Check mark
        const incorrectIcon = document.createElement('span');
        incorrectIcon.classList.add('feedback-icon', 'incorrect');
        incorrectIcon.innerHTML = '&#10006;'; // X mark

        label.appendChild(input);
        label.appendChild(span);
        label.appendChild(correctIcon);
        label.appendChild(incorrectIcon);
        if (optionsEl) optionsEl.appendChild(label);
    });

    if (submitBtn) submitBtn.disabled = false; // Cevapla butonunu aktif et
     // İlerleme metnini güncelle (örn: 1/10)
    if (statsRoundProgressEl && stats.currentRoundTotal > 0) {
         statsRoundProgressEl.textContent = `${Math.min(currentQuestionIndexInRound + 1, stats.currentRoundTotal)}/${stats.currentRoundTotal}`;
    }
    // İlerleme barını ve diğer sayaçları animasyonlu güncelle
    updateStatsDisplay(true);
}

function checkAnswer() {
    const currentQuestion = questionsForRound[currentQuestionIndexInRound];
    const selectedOptionInput = optionsEl ? optionsEl.querySelector(`input[name="option_${currentQuestion.id}"]:checked`) : null;

    // Seçenek işaretlenmemişse uyarı ver
    if (!selectedOptionInput) {
        if (feedbackEl) {
            feedbackEl.textContent = 'Lütfen bir cevap seçin!';
            feedbackEl.className = 'warning-message'; // Uyarı stili için sınıf
            feedbackEl.style.display = 'block';
            // Uyarıyı kısa süre sonra kaldır
            setTimeout(() => { if (feedbackEl) feedbackEl.style.display = 'none'; }, 2000);
        }
        return;
    }

    if (submitBtn) submitBtn.disabled = true; // Butonu pasif yap
    if (optionsEl) optionsEl.classList.add('options-disabled'); // Seçenekleri pasif yap

    const userAnswer = selectedOptionInput.value;
    const correctAnswer = currentQuestion.correctAnswer;
    userAnswers[currentQuestion.id] = userAnswer; // Kullanıcının cevabını kaydet

    let wasCorrect = (userAnswer === correctAnswer);

    // Tüm seçeneklere stilleri uygula
    const optionLabels = optionsEl ? optionsEl.querySelectorAll('.option-label') : [];
    optionLabels.forEach(label => {
        const input = label.querySelector('input');
        if (!input) return;
        // Doğru seçeneği her zaman işaretle
        if (input.value === correctAnswer) {
            label.classList.add('correct-option');
        }
        // Kullanıcının seçtiğini işaretle
        if (input.checked) {
            label.classList.add('user-selected');
            // Kullanıcının seçimi yanlışsa, onu da işaretle
            if (!wasCorrect) {
                label.classList.add('incorrect-option');
            }
        }
    });

    // İstatistikleri güncelle
    if (wasCorrect) {
        stats.currentRoundCorrect++;
        if (currentRound === 'TEST_1') stats.round1Correct++;
        else if (currentRound === 'TEST_2') stats.round2Correct++;
        else if (currentRound === 'TEST_3') stats.round3Correct++;
    } else {
        stats.currentRoundIncorrect++;
        if (currentRound === 'TEST_1') { stats.round1Incorrect++; incorrectInRound1.push(currentQuestion); }
        else if (currentRound === 'TEST_2') { stats.round2Incorrect++; incorrectInRound2.push(currentQuestion); }
        // TEST_3'teki yanlışları tekrar sormayacağız, sadece sayacı artır
    }

    // Doğru/Yanlış sayaçlarını animasyonlu güncelle
    animateIntegerChange(statsRoundCorrectEl, stats.currentRoundCorrect, 300);
    animateIntegerChange(statsRoundIncorrectEl, stats.currentRoundIncorrect, 300);

    currentQuestionIndexInRound++; // Sonraki soruya geçmek için indeksi artır

    // İlerleme barını anında güncelle (animasyonsuz veya CSS ile)
    const progressPercent = Math.min(100, (stats.currentRoundTotal > 0 ? (currentQuestionIndexInRound / stats.currentRoundTotal) * 100 : 0));
    if (progressBarFillEl) progressBarFillEl.style.width = `${progressPercent}%`;
    if(progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', Math.round(progressPercent));
    // İlerleme metnini animasyonlu güncelle (örn: 2/10 olacak şekilde)
    animateProgressText(statsRoundProgressEl, currentQuestionIndexInRound, stats.currentRoundTotal, 300);


    // Geri bildirimi gösterdikten sonra bir süre bekle ve sonraki soruyu yükle
    setTimeout(() => {
        loadQuestion();
    }, 1800); // Geri bildirimi görme süresi
}

function finishRound() {
    console.log(`Tur Bitiriliyor: ${currentRound}`);
    const prevScore1Text = statsRound1ScoreEl ? statsRound1ScoreEl.textContent : '-';
    const prevScore2Text = statsRound2ScoreEl ? statsRound2ScoreEl.textContent : '-';
    const prevScore3Text = statsRound3ScoreEl ? statsRound3ScoreEl.textContent : '-';
    const animationTime = 600; // Skor animasyon süresi
    const resultDelay = animationTime + 50; // Animasyon sonrası bekleme

    let roundScore = 0;
    let roundTotal = 0;
    let roundCorrect = 0;

    // Tamamlanan turun skorunu hesapla
    switch (currentRound) {
        case 'TEST_1':
            roundTotal = stats.round1TotalQuestions;
            roundCorrect = stats.round1Correct;
            stats.round1Score = roundTotal > 0 ? Math.round((roundCorrect / roundTotal) * 100) : 100;
            animateValue(statsRound1ScoreEl, prevScore1Text, stats.round1Score, animationTime);
            setTimeout(() => {
                if (incorrectInRound1.length === 0) { // Yanlış yoksa sonuçlara git
                    stats.statusMessage = "Sonuçlar Hazırlanıyor...";
                    updateStatsDisplay(false);
                    currentRound = 'RESULTS';
                    showResults();
                } else { // Yanlış varsa öğrenme teklif et
                    stats.statusMessage = "1. Tur Tamamlandı";
                    updateStatsDisplay(false);
                    currentRound = 'LEARN_1_OFFER';
                    offerLearningRound(1);
                }
            }, resultDelay);
            break;
        case 'TEST_2':
             // 2. tur sadece 1. turdaki yanlışlardan oluşur
            roundTotal = incorrectInRound1.length;
            roundCorrect = stats.round2Correct;
            stats.round2TotalQuestions = roundTotal; // Toplamı kaydet
            stats.round2Score = roundTotal > 0 ? Math.round((roundCorrect / roundTotal) * 100) : 100;
             // 2. tur skorunu animasyonlu göster
            animateValue(statsRound2ScoreEl, prevScore2Text, stats.round2Score, animationTime);
            setTimeout(() => {
                if (incorrectInRound2.length === 0) { // Yanlış kalmadıysa sonuçlara git
                    stats.statusMessage = "Sonuçlar Hazırlanıyor...";
                    updateStatsDisplay(false);
                    currentRound = 'RESULTS';
                    showResults();
                } else { // Hala yanlış varsa öğrenme teklif et (veya doğrudan 3. tura geç)
                    stats.statusMessage = "2. Tur Tamamlandı";
                    updateStatsDisplay(false);
                    currentRound = 'LEARN_2_OFFER';
                    offerLearningRound(2); // Veya doğrudan startNextTestRound(3) çağrılabilir
                }
            }, resultDelay);
            break;
        case 'TEST_3':
            // 3. tur sadece 2. turdaki yanlışlardan oluşur
            roundTotal = incorrectInRound2.length;
            roundCorrect = stats.round3Correct;
            stats.round3TotalQuestions = roundTotal; // Toplamı kaydet
            stats.round3Score = roundTotal > 0 ? Math.round((roundCorrect / roundTotal) * 100) : 100;
            // Final tur skorunu animasyonlu göster
            animateValue(statsRound3ScoreEl, prevScore3Text, stats.round3Score, animationTime);
            setTimeout(() => {
                stats.statusMessage = "Sonuçlar Hazırlanıyor...";
                updateStatsDisplay(false);
                currentRound = 'RESULTS';
                showResults(); // Her durumda sonuçlara git
            }, resultDelay);
            break;
        default:
            console.error("finishRound beklenmeyen durumda çağrıldı:", currentRound);
            goHome(); // Hata durumunda ana sayfaya dön
    }
     // Tur bittiğinde ilerleme barını sıfırla ve doğru/yanlış sayaçlarını temizle
     // Bu, bir sonraki aşamaya geçmeden önce görsel olarak yapılır.
    if (statsRoundProgressEl) statsRoundProgressEl.textContent = '-';
    if (progressBarFillEl) progressBarFillEl.style.width = '0%';
    if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);
    if (statsRoundCorrectEl) statsRoundCorrectEl.textContent = '-';
    if (statsRoundIncorrectEl) statsRoundIncorrectEl.textContent = '-';
    // Skorlar hariç diğer istatistikleri güncelle
    updateStatsDisplay(false);
}


function offerLearningRound(roundNumber) {
    const incorrectList = (roundNumber === 1) ? incorrectInRound1 : incorrectInRound2;
    const incorrectCount = incorrectList.length;

    if (incorrectCount === 0) { // Teorik olarak buraya gelinmemeli ama kontrol edelim
        console.warn(`Öğrenme turu ${roundNumber} için yanlış soru bulunamadı.`);
        // Eğer 1. tur sonrasıysa 2. tura geç, 2. tur sonrasıysa sonuçlara git
        if (roundNumber === 1) startNextTestRound(2);
        else showResults();
        return;
    }

    if (offerTitleEl) offerTitleEl.textContent = `${roundNumber}. Tur Sonu Değerlendirme`;
    if (offerMessageEl) offerMessageEl.textContent = `Bu turda ${incorrectCount} soruyu yanlış yanıtladınız. İsterseniz bu sorular için bir öğretim turuna katılabilir veya doğrudan bu soruları tekrar çözmeye geçebilirsiniz.`;

    // Butonlara tıklama olaylarını ata
    if (startLearningBtn) startLearningBtn.onclick = () => startLearningRound(roundNumber);
    if (startNextTestBtn) startNextTestBtn.onclick = () => startNextTestRound(roundNumber + 1);

    showQuizContainer('learning-offer-container');
    stats.statusMessage = `${roundNumber}. Tur Tamamlandı - Seçim Bekleniyor`;
    updateStatsDisplay(false); // İstatistikleri güncelle (skorlar zaten animasyonla geldi)
}

function startLearningRound(roundNumber) {
    const incorrectList = (roundNumber === 1) ? incorrectInRound1 : incorrectInRound2;
    if (learningTitleEl) learningTitleEl.textContent = `${roundNumber}. Öğrenme Turu (Yanlışlar)`;
    if (learningContentEl) learningContentEl.innerHTML = ''; // İçeriği temizle

    incorrectList.forEach(q => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('learning-item');

        const questionTitle = document.createElement('h4');
        questionTitle.textContent = q.question.replace(/^\d+\.\s*/, ''); // Başındaki numarayı kaldır

        const answerLine = document.createElement('p');
        answerLine.classList.add('answer-line');
        // Önce sadece doğru cevabı ekle
        answerLine.innerHTML = `Doğru Cevap: <span class="correct-answer">${q.correctAnswer}</span>`;
        // Eğer kullanıcı cevaplamışsa ve yanlışsa, onu da ekle
        if (userAnswers[q.id] && userAnswers[q.id] !== q.correctAnswer) {
            answerLine.innerHTML += ` <span class="user-answer-incorrect">(Sizin Cevabınız: ${userAnswers[q.id]})</span>`;
        }

        const explanationP = document.createElement('p');
        explanationP.classList.add('explanation');
        explanationP.style.display = 'none'; // Başlangıçta gizli
        if (q.explanation) {
            explanationP.textContent = q.explanation;
        } else {
            explanationP.textContent = "Bu soru için ek açıklama bulunmamaktadır.";
            explanationP.style.fontStyle = 'italic';
        }

        // Açıklama ve Geri Bildirim butonları için bir container
        const controlsContainer = document.createElement('div');
        controlsContainer.classList.add('learning-item-controls');

        // Açıklama Göster/Gizle Butonu
        const toggleButton = document.createElement('button');
        toggleButton.textContent = "Açıklama Göster";
        toggleButton.classList.add('explanation-toggle'); // Stil için sınıf
        toggleButton.onclick = () => {
            const isHidden = explanationP.style.display === 'none';
            explanationP.style.display = isHidden ? 'block' : 'none';
            toggleButton.textContent = isHidden ? 'Açıklama Gizle' : 'Açıklama Göster';
        };
        controlsContainer.appendChild(toggleButton);

        // Sorun Bildir Butonu
        const feedbackBtn = document.createElement('button');
        feedbackBtn.innerHTML = '<i class="fas fa-flag" aria-hidden="true"></i> Sorun Bildir';
        feedbackBtn.classList.add('feedback-btn');
        feedbackBtn.title = 'Bu soruyla ilgili bir sorun veya geri bildirim bildirin';
        feedbackBtn.onclick = () => sendFeedback(q.id); // İlgili soru ID'si ile fonksiyonu çağır
        controlsContainer.appendChild(feedbackBtn);


        itemDiv.appendChild(questionTitle);
        itemDiv.appendChild(answerLine);
        itemDiv.appendChild(controlsContainer); // Butonları ekle
        itemDiv.appendChild(explanationP); // Açıklamayı ekle

        if (learningContentEl) learningContentEl.appendChild(itemDiv);
    });

    if (continueToNextTestBtn) continueToNextTestBtn.onclick = () => startNextTestRound(roundNumber + 1);

    currentRound = (roundNumber === 1) ? 'LEARN_1' : 'LEARN_2';
    stats.statusMessage = `${roundNumber}. Öğrenme Turu`;

    // Öğrenme turunda ilerleme ve D/Y sayaçlarını sıfırla/gizle
    if (statsRoundProgressEl) statsRoundProgressEl.textContent = '-';
    if (progressBarFillEl) progressBarFillEl.style.width = '0%';
    if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);
    if (statsRoundCorrectEl) statsRoundCorrectEl.textContent = '-';
    if (statsRoundIncorrectEl) statsRoundIncorrectEl.textContent = '-';

    updateStatsDisplay(false);
    showQuizContainer('learning-round-container');
}

function startNextTestRound(roundNumber) {
    let title = "";
    let questionsToAsk = [];

    if (roundNumber === 2) {
        currentRound = 'TEST_2';
        questionsToAsk = shuffleArray([...incorrectInRound1]); // 1. tur yanlışlarını karıştır
        title = "2. Tur Test Soruları (Yanlışlar)";
        stats.statusMessage = "2. Tur Devam Ediyor...";
        stats.round2TotalQuestions = questionsToAsk.length; // Toplam soru sayısını set et
    } else if (roundNumber === 3) {
        currentRound = 'TEST_3';
        questionsToAsk = shuffleArray([...incorrectInRound2]); // 2. tur yanlışlarını karıştır
        title = "Final Turu Test Soruları (Yanlışlar)";
        stats.statusMessage = "Final Turu Devam Ediyor...";
        stats.round3TotalQuestions = questionsToAsk.length; // Toplam soru sayısını set et
    } else {
        console.error("Geçersiz sonraki tur numarası:", roundNumber);
        // Beklenmedik durum, normalde buraya düşmemeli, finishRound yönlendirir.
        showResults(); // Sonuçları gösterelim yine de.
        return;
    }

    // Eğer bu tur için soru yoksa (önceki tur %100 doğruysa), turu doğrudan bitir
    if (questionsToAsk.length === 0) {
        console.log(`Tur ${roundNumber} için soru yok, tur bitiriliyor.`);
        // İlgili turun skorunu 100 yapıp finishRound'u tetikle
        if (roundNumber === 2) stats.round2Score = 100;
        if (roundNumber === 3) stats.round3Score = 100;
        // finishRound bir önceki state'e göre davrandığı için burada doğrudan showResults daha mantıklı olabilir.
        // Ama finishRound(mevcut state) çağırarak da skor animasyonunu tetikleyebiliriz.
        // Tekrar eden yanlışları düzeltme: Eğer soru yoksa, zaten önceki finishRound sonuçlara yönlendirmiş olmalı.
        // Bu fonksiyon sadece offerLearning sonrası "tekrar çöz" denince çağrılır.
        // Bu durumda soru olmaması mantıksız. Yine de güvenli liman:
        showResults();
        return;
    }

    questionsForRound = questionsToAsk; // Mevcut tur sorularını güncelle

    if (quizTitleEl) quizTitleEl.textContent = title;
    currentQuestionIndexInRound = 0; // Soru indeksini sıfırla
    stats.currentRoundCorrect = 0; // Mevcut tur sayaçlarını sıfırla
    stats.currentRoundIncorrect = 0;
    stats.currentRoundTotal = questionsForRound.length; // Mevcut tur toplamını ayarla

    // Başlayacak turun skor göstergesini sıfırla
    if (roundNumber === 2 && statsRound2ScoreEl) { statsRound2ScoreEl.textContent = '-'; statsRound2ScoreEl.style.color = ''; }
    if (roundNumber === 3 && statsRound3ScoreEl) { statsRound3ScoreEl.textContent = '-'; statsRound3ScoreEl.style.color = ''; }
    if (progressBarFillEl) progressBarFillEl.style.width = '0%'; // İlerleme barını sıfırla
    if(progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);

    updateStatsDisplay(false); // İstatistikleri göster (animasyonsuz başlangıç)
    showQuizContainer('quiz-container'); // Soru konteynerını göster
    loadQuestion(); // İlk soruyu yükle
}

function showResults() {
    currentRound = 'RESULTS'; // State'i güncelle
    let message = "";
    let messageClass = "";

    // Sonuç mesajını belirle
    if (stats.round1Score === 100) {
        message = "Mükemmel! İlk turda tüm soruları doğru bildiniz. Tebrikler!";
        messageClass = "success-message";
    } else if (stats.round2TotalQuestions > 0 && stats.round2Score === 100) {
        message = `Çok iyi! İlk turdaki ${stats.round1Incorrect} yanlışınızı ikinci turda düzelttiniz (${stats.round1Score}% -> ${stats.round2Score}%). Başarılı!`;
        messageClass = "success-message";
    } else if (stats.round3TotalQuestions > 0 && stats.round3Score === 100) {
         message = `Harika! Kalan ${stats.round2Incorrect} yanlışınızı final turunda düzelttiniz (${stats.round2Score}% -> ${stats.round3Score}%). Sonuç mükemmel!`;
        messageClass = "success-message";
    } else if (stats.round3TotalQuestions > 0) { // Final tur oldu ama %100 değil
        const finalIncorrectCount = stats.round3TotalQuestions - stats.round3Correct;
        message = `Test tamamlandı. İlk tur: %${stats.round1Score}, İkinci tur: %${stats.round2Score}, Final tur: %${stats.round3Score}. Son turda ${finalIncorrectCount} yanlışınız kaldı. Gelişim için gayret gösterdiniz!`;
        messageClass = "improvement-message";
    } else if (stats.round2TotalQuestions > 0) { // 2. tur oldu ama %100 değil, 3. tur olmadı
        const round2IncorrectCount = stats.round2TotalQuestions - stats.round2Correct;
         message = `Test tamamlandı. İlk tur: %${stats.round1Score}, İkinci tur: %${stats.round2Score}. İkinci turda ${round2IncorrectCount} yanlışınız kaldı. Daha fazla pratik faydalı olabilir.`;
        messageClass = "improvement-message";
    } else { // Sadece 1. tur oldu ve %100 değildi
        message = `Test tamamlandı. İlk turdaki skorunuz: %${stats.round1Score}. ${stats.round1Incorrect} yanlışınız var. Daha fazla pratik yapmanız önerilir.`;
        messageClass = "improvement-message";
    }

    // Skor bilgilerini yazdır
    if (scoreInfoEl) {
        let scoreText = `İlk Tur Skoru: ${stats.round1Score}% (${stats.round1Correct}/${stats.round1TotalQuestions})`;
        if (stats.round2TotalQuestions > 0) { scoreText += `<br>2. Tur Skoru (Yanlışlar Üzerinden): ${stats.round2Score}% (${stats.round2Correct}/${stats.round2TotalQuestions})`; }
        if (stats.round3TotalQuestions > 0) { scoreText += `<br>Final Tur Skoru (Yanlışlar Üzerinden): ${stats.round3Score}% (${stats.round3Correct}/${stats.round3TotalQuestions})`; }
        scoreInfoEl.innerHTML = scoreText;
    }

    // Sonuç mesajını ve sınıfını ayarla
    if (finalMessageEl) { finalMessageEl.textContent = message; finalMessageEl.className = getStatusMessageClass(message); }

    stats.statusMessage = "Test Tamamlandı";

    // Sonuç ekranında ilerleme ve D/Y sayaçlarını temizle
    if (statsRoundProgressEl) statsRoundProgressEl.textContent = '-';
    if (progressBarFillEl) progressBarFillEl.style.width = '100%'; // Tamamlandığını göster
    if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 100);
    if (statsRoundCorrectEl) statsRoundCorrectEl.textContent = '-';
    if (statsRoundIncorrectEl) statsRoundIncorrectEl.textContent = '-';

    updateStatsDisplay(false); // Son durumu göster
    showQuizContainer('result-container'); // Sonuç konteynerını göster
}

function showFinalReview() {
     // Quiz verisi yüklü değilse işlem yapma
    if (!finalReviewContentEl || !currentQuizData || !currentQuizData.questions) {
        console.error("Final inceleme gösterilemiyor: Gerekli elementler veya quiz verisi eksik.");
        goHome(); // Ana sayfaya dön
        return;
    }

    finalReviewContentEl.innerHTML = ''; // İçeriği temizle
    currentRound = 'FINAL_REVIEW';
    stats.statusMessage = "Genel İnceleme";

    // Quizdeki tüm soruları sırayla işle
    currentQuizData.questions.forEach(q => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('learning-item'); // Öğrenme turu ile aynı stili kullan

        const questionTitle = document.createElement('h4');
        questionTitle.textContent = q.question.replace(/^\d+\.\s*/, '');

        const answerLine = document.createElement('p');
        answerLine.classList.add('answer-line');
        answerLine.innerHTML = `Doğru Cevap: <span class="correct-answer">${q.correctAnswer}</span>`;
        // Kullanıcının son cevabını (varsa ve yanlışsa) göster
        if (userAnswers[q.id] && userAnswers[q.id] !== q.correctAnswer) {
            answerLine.innerHTML += ` <span class="user-answer-incorrect">(Sizin Cevabınız: ${userAnswers[q.id]})</span>`;
        }

        const explanationP = document.createElement('p');
        explanationP.classList.add('explanation');
        if (q.explanation) {
            explanationP.textContent = q.explanation;
        } else {
            explanationP.textContent = "Bu soru için ek açıklama bulunmamaktadır.";
            explanationP.style.fontStyle = 'italic';
        }
        explanationP.style.display = 'block'; // Açıklama her zaman görünür

        // Geri Bildirim butonu için container
         const controlsContainer = document.createElement('div');
         controlsContainer.classList.add('learning-item-controls'); // Stil için sınıf ekle

        // Sorun Bildir Butonu
        const feedbackBtn = document.createElement('button');
        feedbackBtn.innerHTML = '<i class="fas fa-flag" aria-hidden="true"></i> Sorun Bildir';
        feedbackBtn.classList.add('feedback-btn');
        feedbackBtn.title = 'Bu soruyla ilgili bir sorun veya geri bildirim bildirin';
        feedbackBtn.onclick = () => sendFeedback(q.id);
        controlsContainer.appendChild(feedbackBtn); // Butonu container'a ekle


        itemDiv.appendChild(questionTitle);
        itemDiv.appendChild(answerLine);
        itemDiv.appendChild(explanationP); // Açıklama görünür
        itemDiv.appendChild(controlsContainer); // Geri bildirim butonu

        finalReviewContentEl.appendChild(itemDiv);
    });

    // İnceleme ekranında ilerleme ve D/Y sayaçlarını temizle
    if (statsRoundProgressEl) statsRoundProgressEl.textContent = '-';
    if (progressBarFillEl) progressBarFillEl.style.width = '0%';
    if (progressBarTrackEl) progressBarTrackEl.setAttribute('aria-valuenow', 0);
    if (statsRoundCorrectEl) statsRoundCorrectEl.textContent = '-';
    if (statsRoundIncorrectEl) statsRoundIncorrectEl.textContent = '-';

    updateStatsDisplay(false);
    showQuizContainer('final-review-container');
}

// --- Geri Bildirim Fonksiyonu ---
function sendFeedback(questionId) {
    // Quiz veya soru verisi yoksa hata ver
    if (!currentQuizData || !currentQuizData.questions || !currentQuizData.title) {
        console.error("Geri bildirim gönderilemiyor: Quiz verisi eksik.");
        alert("Bir hata oluştu, geri bildirim gönderilemedi. Lütfen daha sonra tekrar deneyin.");
        return;
    }

    // ID'ye göre soruyu bul
    const questionData = currentQuizData.questions.find(q => q.id === questionId);
    if (!questionData) {
        console.error("Geri bildirim gönderilemiyor: Soru ID bulunamadı:", questionId);
        alert("Bir hata oluştu, soru bilgisi bulunamadı.");
        return;
    }

    const quizTitle = currentQuizData.title;
    const questionText = questionData.question.replace(/^\d+\.\s*/, ''); // Başındaki numarayı kaldır
    const recipient = "srgulbay@gmail.com"; // Hedef e-posta adresi

    const subject = `Quiz Geri Bildirimi: [${quizTitle}] - Soru ID: ${questionId}`;
    const body = `
Quiz Adı: ${quizTitle}
Soru ID: ${questionId}
Soru Metni: ${questionText}
Doğru Cevap: ${questionData.correctAnswer}
------------------------------------
Lütfen geri bildiriminizi/sorunu buraya yazın:

[Buraya yazınız...]
------------------------------------

(Bu e-posta otomatik olarak oluşturulmuştur.)
`;

    // mailto linkini oluştur ve güvenli hale getir
    const mailtoLink = `mailto:${recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

    // E-posta istemcisini açmayı dene
    try {
        window.location.href = mailtoLink; // window.open yerine bu daha güvenilir
    } catch (e) {
        console.error("Mailto linki açılamadı:", e);
        alert("E-posta istemciniz otomatik olarak açılamadı. Lütfen manuel olarak geri bildirim gönderin: " + recipient);
    }
}
// --- Sayfa Navigasyonu ve Tema ---

function goHome() {
    console.log("Ana sayfa görünümüne dönülüyor...");

    // --- QUIZ ARAYÜZÜNÜ GİZLE ---
    if (statsContainerEl) statsContainerEl.style.display = 'none';
    if (quizMainContentEl) quizMainContentEl.style.display = 'none';
    // --- GİZLEME SONU ---

    // --- ANA SAYFA BÖLÜMLERİNİ GÖSTER --- // GÜNCELLENDİ
    if (homepageContentEl) homepageContentEl.style.display = 'block';   // Hero ve Konular'ı içeren div
    // mainContentContainerEl zaten homepageContentEl içinde olduğu için ayrıca göstermeye gerek yok.
    if (quizlerSectionEl) quizlerSectionEl.style.display = 'block';     // Quizler bölümü
    if (hakkindaSectionEl) hakkindaSectionEl.style.display = 'block';   // Hakkında bölümü EKLENDİ
    // --- GÖSTERME SONU ---

    document.body.classList.remove('quiz-active');
    window.scrollTo(0, 0);

    // Aktif quiz state'ini temizle (Bu kısım aynı kalıyor)
    currentQuizId = null;
    currentQuizData = null;
    // ... (diğer state sıfırlamaları) ...

    // İstatistik ekranını temizle (Bu kısım aynı kalıyor)
    updateStatsDisplay(false);

    // Navigasyon linklerini ayarla (Bu kısım aynı kalıyor)
    document.querySelectorAll('#main-header nav a.active, .mobile-nav a.active').forEach(link => link.classList.remove('active'));
    const homeNavLinkDesktop = document.querySelector('#main-header nav a[href="#hero"]');
    const homeNavLinkMobile = document.querySelector('.mobile-nav a[href="#hero"]');
    if(homeNavLinkDesktop) homeNavLinkDesktop.classList.add('active');
    if(homeNavLinkMobile) homeNavLinkMobile.classList.add('active');
}

// Quiz kartından quiz'i başlatır
function startQuiz(quizId) {
    console.log(`Quiz Başlatılıyor: ${quizId}`);
    const selectedQuiz = quizData[quizId];

    // Quiz verisi yoksa veya soru yoksa hata ver
    if (!selectedQuiz || !selectedQuiz.questions || selectedQuiz.questions.length === 0) {
        const quizLink = document.querySelector(`.card-link[onclick*="startQuiz('${quizId}')"]`);
        let message = `Quiz "${quizId}" bulunamadı veya soruları eksik.`;
        if (quizLink && quizLink.classList.contains('disabled')) {
            message = `"${selectedQuiz?.title || quizId}" başlıklı quiz henüz hazır değil.`;
        }
        alert(message);
        console.error(`Quiz datası bulunamadı veya boş: ${quizId}`);
        return;
    }

    // --- ANA SAYFA BÖLÜMLERİNİ GİZLE --- // GÜNCELLENDİ
    if (homepageContentEl) homepageContentEl.style.display = 'none';   // Hero ve Konular'ı içeren div
    if (quizlerSectionEl) quizlerSectionEl.style.display = 'none';     // Quizler bölümü
    if (hakkindaSectionEl) hakkindaSectionEl.style.display = 'none';   // Hakkında bölümü EKLENDİ
    // mainContentContainerEl zaten homepageContentEl içinde olduğu için ayrıca gizlemeye gerek yok.
    // --- GİZLEME SONU ---

    // --- QUIZ ARAYÜZÜNÜ GÖSTER ---
    if (statsContainerEl) statsContainerEl.style.display = 'flex';
    if (quizMainContentEl) quizMainContentEl.style.display = 'block';
    document.body.classList.add('quiz-active');
    // --- GÖSTERME SONU ---

    window.scrollTo(0, 0); // Sayfanın başına git

    // Seçilen quiz'i başlat
    initializeQuiz(quizId, selectedQuiz.title, selectedQuiz.questions);
}
// Belirtilen temayı uygula
function applyTheme(theme) {
    const isDark = theme === 'dark';
    document.body.classList.toggle('dark-mode', isDark);

    // Her iki tema değiştirme butonunun ikonunu güncelle
    const icon = isDark ? '☀️' : '🌓';
    if (themeToggleButton) { // Desktop button
         // Butonun içindeki span'ı hedefle
        const span = themeToggleButton.querySelector('span');
        if(span) span.textContent = icon;
        themeToggleButton.setAttribute('aria-label', isDark ? 'Açık Temaya Geç' : 'Koyu Temaya Geç');
    }
    if (themeToggleMobileBtn) { // Mobile button
        const span = themeToggleMobileBtn.querySelector('span');
         if(span) span.textContent = icon;
        themeToggleMobileBtn.setAttribute('aria-label', isDark ? 'Açık Temaya Geç (Mobil)' : 'Koyu Temaya Geç (Mobil)');
    }
}

// Temayı değiştir (açık/koyu)
function toggleTheme() {
    const currentTheme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    applyTheme(newTheme);
    try {
        localStorage.setItem('quizTheme', newTheme); // Temayı kaydet
    } catch (e) {
        console.error("LocalStorage kullanılamıyor, tema kaydedilemedi.", e);
    }
}

// Sayfa yüklendiğinde temayı başlat
function initializeTheme() {
    let preferredTheme = 'light'; // Varsayılan
    try {
        preferredTheme = localStorage.getItem('quizTheme') || preferredTheme;
    } catch (e) {
        console.warn("LocalStorage okunamıyor, varsayılan tema kullanılacak.", e);
    }
    // LocalStorage'da yoksa sistem tercihini kontrol et
    if (!localStorage.getItem('quizTheme') && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
         preferredTheme = 'dark';
    }
    applyTheme(preferredTheme);
}

// Belirtilen ID'ye yumuşak kaydırma
function smoothScrollToTarget(targetId) {
    const isHeroLink = targetId === '#hero' || targetId === '#'; // Ana sayfa linki

     // Tüm aktif link sınıflarını kaldır
     document.querySelectorAll('#main-header nav a.active, .mobile-nav a.active').forEach(link => link.classList.remove('active'));

     // Tıklanan linki aktif yap
     const activeLinkDesktop = document.querySelector(`#main-header nav a[href="${targetId}"]`);
     const activeLinkMobile = document.querySelector(`.mobile-nav a[href="${targetId}"]`);
     if(activeLinkDesktop) activeLinkDesktop.classList.add('active');
     if(activeLinkMobile) activeLinkMobile.classList.add('active');


    if (isHeroLink) {
        window.scrollTo({ top: 0, behavior: "smooth" });
    } else {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
            // Sticky header/stats bar yüksekliğini hesapla
            let offset = 0;
            const headerElement = document.getElementById('main-header');
            const statsBar = document.getElementById('stats-container');

            if (document.body.classList.contains('quiz-active') && statsBar && getComputedStyle(statsBar).display !== 'none') {
                 offset = statsBar.offsetHeight;
            } else if (headerElement && getComputedStyle(headerElement).position === 'sticky') {
                 offset = headerElement.offsetHeight;
            }

            const elementPosition = targetElement.getBoundingClientRect().top;
            // pageYOffset yerine scrollY kullanılabilir (daha modern)
            const offsetPosition = elementPosition + window.scrollY - offset - 20; // 20px ek boşluk

            window.scrollTo({
                top: offsetPosition,
                behavior: "smooth"
            });
        } else {
            console.warn("Kaydırma hedefi bulunamadı:", targetId);
        }
    }
}


// --- Arama Fonksiyonları ---
let searchableIndex = []; // Arama için {id, title, description, type, elementId} objelerini tutar

// Quiz ve (ileride) ders notlarından arama indeksi oluşturur
function createSearchIndex() {
    searchableIndex = [];
    console.log("Arama indeksi oluşturuluyor...");

    // Quizleri işle
    for (const quizId in quizData) {
        if (quizData.hasOwnProperty(quizId)) {
            const quiz = quizData[quizId];
            let description = '';
            // Quiz kartından açıklamayı DOM'dan çekmeyi dene (HTML yapısına bağımlı)
            // ID'si `quiz-title-${quizId}` olan H3'ü bul
            const titleElement = document.getElementById(`quiz-title-${quizId}`);
            if (titleElement && titleElement.nextElementSibling && titleElement.nextElementSibling.tagName === 'P') {
                description = titleElement.nextElementSibling.textContent;
            } else { // Alternatif: Kart içindeki ilk P etiketi
                 // Kartı bulmak için aria-labelledby kullanmak daha sağlam olabilir
                 const cardElement = document.querySelector(`.quiz-card[aria-labelledby="quiz-title-${quizId}"]`);
                 const pElement = cardElement ? cardElement.querySelector('p') : null;
                 if (pElement) {
                     description = pElement.textContent;
                 }
            }

             // Kartın kendisi için scroll hedefi ID'si oluştur
             const cardElementId = `card-${quizId}`;
             const cardElement = document.querySelector(`.quiz-card[aria-labelledby="quiz-title-${quizId}"]`);
             if (cardElement && !cardElement.id) {
                 cardElement.id = cardElementId; // ID yoksa ata
             }

            searchableIndex.push({
                id: quizId,
                title: quiz.title || 'Başlıksız Quiz',
                description: description || '', // Açıklama yoksa boş string
                type: 'quiz',
                elementId: cardElementId // Scroll için DOM element ID'si
            });
        }
    }

    // İLERİDE: Konu anlatımlarını da buraya ekle
    // if (typeof lectureData !== 'undefined') { ... }

    console.log(`Arama indeksi ${searchableIndex.length} elemanla oluşturuldu.`);
}

// Arama modalını aç
function openSearchModal() {
    if (!searchModal) return;
    document.body.classList.add('search-active'); // Overlay görünürlüğü için
    searchModal.setAttribute('aria-hidden', 'false');
    // Animasyon için kısa gecikme sonrası input'a odaklan
    setTimeout(() => {
        if (searchInput) searchInput.focus();
    }, 50);
    // document.body.style.overflow = 'hidden'; // Arka plan scroll'u engelle (isteğe bağlı)
}

// Arama modalını kapat
function closeSearchModal() {
    if (!searchModal) return;
    document.body.classList.remove('search-active');
    searchModal.setAttribute('aria-hidden', 'true');
    if (searchInput) searchInput.value = ''; // Input'u temizle
    if (searchResultsContainer) { // Sonuçları temizle ve placeholder'ı göster
        searchResultsContainer.innerHTML = '<p class="search-placeholder">Aramak için en az 2 karakter girin...</p>';
    }
     // document.body.style.overflow = ''; // Scroll'u geri aç
}

// Arama işlemini gerçekleştirir (debounce ile çağrılır)
function performSearch() {
    if (!searchInput || !searchResultsContainer) return;

    const searchTerm = searchInput.value.trim().toLowerCase();
    const minCharLength = 2;

    searchResultsContainer.innerHTML = ''; // Sonuçları temizle

    if (searchTerm.length < minCharLength) {
        searchResultsContainer.innerHTML = '<p class="search-placeholder">Aramak için en az 2 karakter girin...</p>';
        return;
    }

    // Basit Türkçe karakter normalizasyonu
    const normalizeText = (text) => text
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // Aksanları kaldır
        .replace(/ı/g, 'i')
        .toLowerCase();

    const normalizedSearchTerm = normalizeText(searchTerm);

    // İndeksi filtrele
    const results = searchableIndex.filter(item => {
        const normalizedTitle = normalizeText(item.title || '');
        const normalizedDesc = normalizeText(item.description || '');
        // Başlık veya açıklamada arama terimi geçiyor mu?
        return normalizedTitle.includes(normalizedSearchTerm) || normalizedDesc.includes(normalizedSearchTerm);
    });

    renderSearchResults(results, searchTerm); // Sonuçları ekrana yazdır
}

// Arama sonuçlarını HTML olarak oluşturur ve ekler
function renderSearchResults(results, searchTerm) {
    if (!searchResultsContainer) return;
    searchResultsContainer.innerHTML = ''; // Önce temizle

    if (results.length === 0) {
        searchResultsContainer.innerHTML = '<p class="search-no-results">"' + searchTerm + '" için sonuç bulunamadı.</p>';
        return;
    }

    results.forEach(item => {
        const resultElement = document.createElement('a'); // Sonuçları tıklanabilir yap
        resultElement.classList.add('search-result-item');
        resultElement.href = `#${item.elementId || ''}`; // Hedef ID'ye link (scroll için)

        const titleEl = document.createElement('div');
        titleEl.classList.add('search-result-title');
        // Arama terimini vurgula (isteğe bağlı - basit implementasyon)
        try {
             const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
             titleEl.innerHTML = item.title.replace(regex, '<mark>$1</mark>');
        } catch (e) { titleEl.textContent = item.title; } // Hata olursa normal göster


        const descEl = document.createElement('p');
        descEl.classList.add('search-result-desc');
        const truncatedDesc = item.description ? item.description.substring(0, 120) + (item.description.length > 120 ? '...' : '') : '';
        // Açıklamada da vurgulama (isteğe bağlı)
         try {
             const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
             descEl.innerHTML = truncatedDesc.replace(regex, '<mark>$1</mark>');
        } catch (e) { descEl.textContent = truncatedDesc; }


        const typeEl = document.createElement('span');
        typeEl.classList.add('search-result-type', item.type); // 'quiz' veya 'lecture' sınıfı
        typeEl.textContent = item.type === 'quiz' ? 'Quiz' : 'Konu Anlatımı';

        resultElement.appendChild(typeEl); // Tip önce görünsün
        resultElement.appendChild(titleEl);
        resultElement.appendChild(descEl);


        // Sonuca tıklanınca ilgili yere scroll et
        resultElement.addEventListener('click', (e) => {
            e.preventDefault(); // Linkin varsayılan davranışını engelle
            closeSearchModal(); // Modalı kapat

            if (item.type === 'quiz' && item.elementId) {
                const targetCard = document.getElementById(item.elementId);
                if (targetCard) {
                     // smoothScrollToTarget bu işi zaten yapıyor, onu çağıralım
                     smoothScrollToTarget(`#${item.elementId}`);

                    // Kartı kısa süreliğine vurgula
                    targetCard.style.transition = 'outline 0.1s ease-out';
                    targetCard.style.outline = '3px solid var(--accent-primary)';
                    setTimeout(() => { targetCard.style.outline = 'none'; }, 1500);
                } else {
                    console.warn(`Scroll hedefi bulunamadı: #${item.elementId}`);
                    // Fallback: Belki quiz'i başlat? startQuiz(item.id);
                }
            } else if (item.type === 'lecture' && item.url) {
                 // Konu anlatımı linkine git (şu an yok)
                 // window.location.href = item.url;
            }
        });

        searchResultsContainer.appendChild(resultElement);
    });
}


// --- Mobil Menü Fonksiyonları ---

// Mobil menüyü kapatır
function closeMobileMenu() {
    const body = document.body;
    if (body.classList.contains('mobile-menu-active')) {
        body.classList.remove('mobile-menu-active');
        if (mobileMenuToggleBtn) {
             mobileMenuToggleBtn.setAttribute('aria-expanded', 'false');
              // İkonu geri hamburgere çevir
             const icon = mobileMenuToggleBtn.querySelector('i');
             if (icon) {
                 icon.classList.remove('fa-times');
                 icon.classList.add('fa-bars');
             }
        }
        if (mobileNav) mobileNav.setAttribute('aria-hidden', 'true');
    }
}
// --- Olay Dinleyicileri ve Başlangıç Kurulumu ---

document.addEventListener('DOMContentLoaded', () => {
    // 1. Başlangıç Ayarları
    initializeTheme(); // Temayı yükle/ayarla
    createSearchIndex(); // Arama için veriyi hazırla

    // Copyright yılını ayarla
    const copyrightYearEl = document.getElementById('copyright-year');
    if (copyrightYearEl) copyrightYearEl.textContent = new Date().getFullYear();

    // 2. Genel Buton Olayları (Quiz İçi Olmayanlar)
    if (submitBtn) submitBtn.addEventListener('click', checkAnswer);
    if (showFinalReviewBtn) showFinalReviewBtn.addEventListener('click', showFinalReview);
    if (themeToggleButton) themeToggleButton.addEventListener('click', toggleTheme); // Masaüstü tema butonu

    // 3. Masaüstü Navigasyon Linkleri (Smooth Scroll)
    const desktopNavLinks = document.querySelectorAll('#main-header nav a[href^="#"]');
    desktopNavLinks.forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault(); // Varsayılan atlamayı engelle
            const targetHref = this.getAttribute('href');
            // Eğer quiz aktifse ve sayfa içi linke tıklanıyorsa, önce ana sayfaya dön
            if (document.body.classList.contains('quiz-active') && targetHref && targetHref.startsWith('#')) {
                goHome();
                // goHome sonrası DOM'un güncellenmesi için kısa bir gecikme
                setTimeout(() => smoothScrollToTarget(targetHref), 50);
            } else if (targetHref) { // Quiz aktif değilse veya dış linkse
                smoothScrollToTarget(targetHref); // Sadece scroll yap (veya dış linke git)
            }
        });
    });

    // 4. Arama Modalı Olayları
    if (headerSearchBtn) headerSearchBtn.addEventListener('click', openSearchModal); // Header arama ikonu
    if (searchCloseBtn) searchCloseBtn.addEventListener('click', closeSearchModal); // Modal kapatma butonu

    // Modal dışına (overlay'e) tıklayınca kapat
    if (searchModal) {
        searchModal.addEventListener('click', (event) => {
            if (event.target === searchModal) { // Sadece overlay'e tıklandıysa
                closeSearchModal();
            }
        });
    }

    // Arama input'una yazıldıkça (debounce ile) arama yap
    if (searchInput) {
        searchInput.addEventListener('input', debounce(performSearch, 300)); // 300ms gecikme
    }


    // 5. Mobil Menü Olayları
    const body = document.body; // body referansını alalım

    // Hamburger ikonuna tıklama
    if (mobileMenuToggleBtn && mobileNav) {
        mobileMenuToggleBtn.addEventListener('click', () => {
            const isExpanded = mobileMenuToggleBtn.getAttribute('aria-expanded') === 'true';
            body.classList.toggle('mobile-menu-active'); // Menü görünürlüğü için body sınıfı
            mobileMenuToggleBtn.setAttribute('aria-expanded', !isExpanded);
            mobileNav.setAttribute('aria-hidden', isExpanded);

            // İkonu değiştir (fa-bars / fa-times)
            const icon = mobileMenuToggleBtn.querySelector('i');
            if (icon) {
                icon.classList.toggle('fa-bars', isExpanded); // Kapanıyorsa bars yap
                icon.classList.toggle('fa-times', !isExpanded); // Açılıyorsa times yap
            }
        });
    }

    // Mobil menü kapatma butonuna tıklama
    if (mobileMenuCloseBtn) {
        mobileMenuCloseBtn.addEventListener('click', closeMobileMenu);
    }

    // Mobil menü linklerine tıklama
    const mobileNavLinks = document.querySelectorAll('.mobile-nav a');
    mobileNavLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetHref = link.getAttribute('href');

            // Quiz aktifse ve sayfa içi linkse, önce ana sayfaya dön
             if (body.classList.contains('quiz-active') && targetHref && targetHref.startsWith('#')) {
                 goHome();
                 // Kısa gecikme ile scroll yap
                 setTimeout(() => smoothScrollToTarget(targetHref), 50);
             } else if (targetHref && targetHref.startsWith('#')) { // Sayfa içi link, quiz aktif değil
                 smoothScrollToTarget(targetHref);
             } else if (targetHref) { // Dış link
                 window.location.href = targetHref; // Normal link davranışı
             }
             // Her durumda menüyü kapat
             closeMobileMenu();
        });
    });

    // Mobil menüdeki Arama butonuna tıklama
    if (mobileSearchBtn) {
        mobileSearchBtn.addEventListener('click', () => {
            closeMobileMenu(); // Önce menüyü kapat
            openSearchModal(); // Sonra arama modalını aç
        });
    }

    // Mobil menüdeki Tema butonuna tıklama
    if (themeToggleMobileBtn) {
        themeToggleMobileBtn.addEventListener('click', () => {
             toggleTheme(); // Temayı değiştir (ikonu zaten applyTheme güncelliyor)
             // İsteğe bağlı: Temayı değiştirdikten sonra menüyü kapatabilirsin
             // closeMobileMenu();
        });
    }

    // Menü dışına tıklayınca menüyü kapat
     document.addEventListener('click', function(event) {
         // Tıklanan yer menü veya menü açma butonu değilse VE menü aktifse
         if (mobileNav && mobileMenuToggleBtn &&
             !mobileNav.contains(event.target) &&
             !mobileMenuToggleBtn.contains(event.target) &&
             body.classList.contains('mobile-menu-active')) {
             closeMobileMenu();
         }
     });


    // 6. Klavye Olayları (ESC)
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            // Arama modalı açıksa kapat
            if (body.classList.contains('search-active')) {
                closeSearchModal();
            }
            // Mobil menü açıksa kapat
            else if (body.classList.contains('mobile-menu-active')) {
                closeMobileMenu();
            }
        }
    });

    // 7. Başlangıç Görünümünü Ayarla
    goHome(); // Sayfa yüklendiğinde ana sayfa görünümünü aktif et
});
</script>
    </body>
    </html>
